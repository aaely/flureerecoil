[{"/home/aely/flureerecoil/src/index.js":"1","/home/aely/flureerecoil/src/utils/loadNetID.js":"2","/home/aely/flureerecoil/src/utils/flureeFetch.js":"3","/home/aely/flureerecoil/src/utils/loadWeb3.js":"4","/home/aely/flureerecoil/src/utils/loadContract.js":"5","/home/aely/flureerecoil/src/Recoil/contract.js":"6","/home/aely/flureerecoil/src/utils/loadAccount.js":"7","/home/aely/flureerecoil/src/queries/fetchTerpenes.js":"8","/home/aely/flureerecoil/src/queries/fetchCannabinoids.js":"9","/home/aely/flureerecoil/src/queries/fetchProducts.js":"10","/home/aely/flureerecoil/src/DebugObserver.js":"11","/home/aely/flureerecoil/src/ws.js":"12","/home/aely/flureerecoil/src/exws.js":"13","/home/aely/flureerecoil/src/queries/getUser.js":"14","/home/aely/flureerecoil/src/utils/axiosLogin.js":"15","/home/aely/flureerecoil/src/Recoil/erc777.js":"16","/home/aely/flureerecoil/src/utils/loadERC777.js":"17","/home/aely/flureerecoil/src/utils/getLiveETHUSD.js":"18","/home/aely/flureerecoil/src/utils/useInterval.js":"19","/home/aely/flureerecoil/src/queries/addTerpene.js":"20","/home/aely/flureerecoil/src/queries/addCannabinoid.js":"21","/home/aely/flureerecoil/src/Components/Cart.tsx":"22","/home/aely/flureerecoil/src/Pages/Checkout.tsx":"23","/home/aely/flureerecoil/src/App.tsx":"24","/home/aely/flureerecoil/src/reportWebVitals.ts":"25","/home/aely/flureerecoil/src/Components/Loader.tsx":"26","/home/aely/flureerecoil/src/Components/Landing.tsx":"27","/home/aely/flureerecoil/src/Components/Test2.tsx":"28","/home/aely/flureerecoil/src/Components/Test.tsx":"29","/home/aely/flureerecoil/src/Recoil/fluree.tsx":"30","/home/aely/flureerecoil/src/Components/Test4.tsx":"31","/home/aely/flureerecoil/src/Recoil/socket.tsx":"32","/home/aely/flureerecoil/src/Components/Test3.tsx":"33","/home/aely/flureerecoil/src/types/types.ts":"34","/home/aely/flureerecoil/src/Recoil/spotify.tsx":"35","/home/aely/flureerecoil/src/queries/getPlaylist.js":"36","/home/aely/flureerecoil/src/Components/SpotifyPlayer.tsx":"37","/home/aely/flureerecoil/src/utils/useWebsocket.tsx":"38","/home/aely/flureerecoil/src/Components/Exp.tsx":"39","/home/aely/flureerecoil/src/queries/getPlayer.js":"40","/home/aely/flureerecoil/src/Components/SpotifySearch.tsx":"41","/home/aely/flureerecoil/src/Components/RenderArtists.tsx":"42","/home/aely/flureerecoil/src/Components/RenderTracks.tsx":"43","/home/aely/flureerecoil/src/queries/searchSpotify.js":"44","/home/aely/flureerecoil/src/queries/getAlbumTracks.js":"45","/home/aely/flureerecoil/src/queries/getArtistAlbums.js":"46","/home/aely/flureerecoil/src/Components/RenderArtistAlbums.tsx":"47","/home/aely/flureerecoil/src/Components/RenderAlbumTracks.tsx":"48","/home/aely/flureerecoil/src/queries/addToMyTracks.js":"49","/home/aely/flureerecoil/src/Components/MyNavbar.tsx":"50","/home/aely/flureerecoil/src/Pages/Spotify.tsx":"51","/home/aely/flureerecoil/src/Components/Loaders/Circles.tsx":"52","/home/aely/flureerecoil/src/Components/Loaders/Rings.tsx":"53","/home/aely/flureerecoil/src/Components/Loaders/PacMan.tsx":"54","/home/aely/flureerecoil/src/Pages/ManageTerpenes.tsx":"55","/home/aely/flureerecoil/src/Components/Terpenes.tsx":"56","/home/aely/flureerecoil/src/Components/TerpeneEdit.tsx":"57","/home/aely/flureerecoil/src/queries/updateTerpene.js":"58","/home/aely/flureerecoil/src/Pages/ManageCannabinoids.tsx":"59","/home/aely/flureerecoil/src/Components/CannabinoidEdit.tsx":"60","/home/aely/flureerecoil/src/Components/Cannabinoids.tsx":"61","/home/aely/flureerecoil/src/queries/updateCannabinoid.js":"62","/home/aely/flureerecoil/src/queries/getMyPurchases.js":"63","/home/aely/flureerecoil/src/Pages/ManageCustomers.tsx":"64","/home/aely/flureerecoil/src/Components/NewCustomer.tsx":"65","/home/aely/flureerecoil/src/queries/newCustomer.js":"66","/home/aely/flureerecoil/src/Components/Dashboard.tsx":"67","/home/aely/flureerecoil/src/queries/userLogin.js":"68","/home/aely/flureerecoil/src/Components/AddTerpene.tsx":"69","/home/aely/flureerecoil/src/Components/AddCannabinoid.tsx":"70","/home/aely/flureerecoil/src/queries/fetchCategories.js":"71","/home/aely/flureerecoil/src/Pages/ManageProducts.tsx":"72","/home/aely/flureerecoil/src/Components/NewProduct.tsx":"73","/home/aely/flureerecoil/src/Components/NewProductProfile.tsx":"74","/home/aely/flureerecoil/src/Components/Review.tsx":"75","/home/aely/flureerecoil/src/Components/TerpeneProfile.tsx":"76","/home/aely/flureerecoil/src/Components/CannabinoidProfile.tsx":"77","/home/aely/flureerecoil/src/Recoil/productForm.tsx":"78","/home/aely/flureerecoil/src/Components/TerpeneForm.tsx":"79","/home/aely/flureerecoil/src/Components/CannabinoidForm.tsx":"80","/home/aely/flureerecoil/src/queries/addProduct.tsx":"81","/home/aely/flureerecoil/src/Components/Products.tsx":"82","/home/aely/flureerecoil/src/Components/ProductDetails.tsx":"83","/home/aely/flureerecoil/src/utils/ipfs.js":"84","/home/aely/flureerecoil/src/Components/TerpeneDisplay.tsx":"85","/home/aely/flureerecoil/src/Components/CannabinoidDisplay.tsx":"86","/home/aely/flureerecoil/src/Components/EditProduct.tsx":"87","/home/aely/flureerecoil/src/queries/updateProduct.tsx":"88","/home/aely/flureerecoil/src/Recoil/index.js":"89","/home/aely/flureerecoil/src/queries/index.js":"90","/home/aely/flureerecoil/src/queries/fetchCustomers.js":"91","/home/aely/flureerecoil/src/queries/fetchLocations.js":"92","/home/aely/flureerecoil/src/queries/getMyAlbums.js":"93","/home/aely/flureerecoil/src/queries/getMyTracks.js":"94","/home/aely/flureerecoil/src/queries/getTrackDetails.js":"95","/home/aely/flureerecoil/src/types/index.js":"96","/home/aely/flureerecoil/src/Components/Loaders/MyBarLoader.tsx":"97","/home/aely/flureerecoil/src/Recoil/windowEvents.tsx":"98","/home/aely/flureerecoil/src/Components/MySidebar.tsx":"99","/home/aely/flureerecoil/src/Components/RenderProducts.tsx":"100","/home/aely/flureerecoil/src/Components/RenderProduct.tsx":"101","/home/aely/flureerecoil/src/utils/useNetworkMonitor.tsx":"102","/home/aely/flureerecoil/src/Components/MySidebarHeader.tsx":"103","/home/aely/flureerecoil/src/Components/MySidebarContent.tsx":"104","/home/aely/flureerecoil/src/utils/loadAccountBalance.js":"105","/home/aely/flureerecoil/src/Components/SpotifySubMenu.tsx":"106","/home/aely/flureerecoil/src/Components/MySidebarFooter.tsx":"107","/home/aely/flureerecoil/src/utils/useExpTimer.tsx":"108","/home/aely/flureerecoil/src/Components/CartSubMenuItem.tsx":"109","/home/aely/flureerecoil/src/Recoil/dspTST.tsx":"110","/home/aely/flureerecoil/src/utils/loadDSPTST.js":"111","/home/aely/flureerecoil/src/utils/useTransListener.tsx":"112","/home/aely/flureerecoil/src/utils/useViewport.tsx":"113","/home/aely/flureerecoil/src/utils/useSidebarWidth.tsx":"114","/home/aely/flureerecoil/src/Components/NewSidebarBgImage.tsx":"115","/home/aely/flureerecoil/src/queries/addSidebarImage.js":"116","/home/aely/flureerecoil/src/queries/getBgImages.js":"117","/home/aely/flureerecoil/src/Components/RenderShows.tsx":"118","/home/aely/flureerecoil/src/Components/RenderEpisodes.tsx":"119","/home/aely/flureerecoil/src/queries/getShowEpisodes.js":"120"},{"size":1229,"mtime":1615999973142,"results":"121","hashOfConfig":"122"},{"size":153,"mtime":1615747241762,"results":"123","hashOfConfig":"122"},{"size":1657,"mtime":1618751686570,"results":"124","hashOfConfig":"122"},{"size":393,"mtime":1615995554075,"results":"125","hashOfConfig":"122"},{"size":219,"mtime":1612317792731,"results":"126","hashOfConfig":"122"},{"size":3911,"mtime":1615765656976,"results":"127","hashOfConfig":"122"},{"size":219,"mtime":1615752088571,"results":"128","hashOfConfig":"122"},{"size":846,"mtime":1615239433256,"results":"129","hashOfConfig":"122"},{"size":915,"mtime":1615217357766,"results":"130","hashOfConfig":"122"},{"size":850,"mtime":1614904112626,"results":"131","hashOfConfig":"122"},{"size":430,"mtime":1611261908408,"results":"132","hashOfConfig":"133"},{"size":352,"mtime":1618751805627,"results":"134","hashOfConfig":"122"},{"size":472,"mtime":1611440364151,"results":"135","hashOfConfig":"122"},{"size":190,"mtime":1613743672715,"results":"136","hashOfConfig":"122"},{"size":766,"mtime":1611548960883,"results":"137","hashOfConfig":"138"},{"size":1272,"mtime":1615841667186,"results":"139","hashOfConfig":"122"},{"size":206,"mtime":1615835144740,"results":"140","hashOfConfig":"122"},{"size":249,"mtime":1612142540074,"results":"141","hashOfConfig":"138"},{"size":461,"mtime":1613333154925,"results":"142","hashOfConfig":"122"},{"size":409,"mtime":1613493519015,"results":"143","hashOfConfig":"122"},{"size":388,"mtime":1613581503641,"results":"144","hashOfConfig":"122"},{"size":3594,"mtime":1616435797307,"results":"145","hashOfConfig":"122"},{"size":3179,"mtime":1617646622142,"results":"146","hashOfConfig":"122"},{"size":4507,"mtime":1616773612230,"results":"147","hashOfConfig":"122"},{"size":426,"mtime":1613685361511,"results":"148","hashOfConfig":"122"},{"size":632,"mtime":1615247720824,"results":"149","hashOfConfig":"122"},{"size":1497,"mtime":1615220375582,"results":"150","hashOfConfig":"151"},{"size":1797,"mtime":1617468670521,"results":"152","hashOfConfig":"122"},{"size":553,"mtime":1615471293099,"results":"153","hashOfConfig":"122"},{"size":8187,"mtime":1616771917461,"results":"154","hashOfConfig":"122"},{"size":1086,"mtime":1616443931783,"results":"155","hashOfConfig":"122"},{"size":7263,"mtime":1616519576870,"results":"156","hashOfConfig":"122"},{"size":333,"mtime":1615223337698,"results":"157","hashOfConfig":"122"},{"size":6513,"mtime":1615471975630,"results":"158","hashOfConfig":"122"},{"size":2635,"mtime":1615924465034,"results":"159","hashOfConfig":"122"},{"size":375,"mtime":1613761775104,"results":"160","hashOfConfig":"122"},{"size":568,"mtime":1615223211149,"results":"161","hashOfConfig":"122"},{"size":3793,"mtime":1616442588735,"results":"162","hashOfConfig":"122"},{"size":591,"mtime":1615483089649,"results":"163","hashOfConfig":"122"},{"size":368,"mtime":1613763280376,"results":"164","hashOfConfig":"122"},{"size":5143,"mtime":1617643081249,"results":"165","hashOfConfig":"122"},{"size":2015,"mtime":1615222436935,"results":"166","hashOfConfig":"122"},{"size":1594,"mtime":1616366690450,"results":"167","hashOfConfig":"122"},{"size":452,"mtime":1613853289593,"results":"168","hashOfConfig":"122"},{"size":489,"mtime":1613881935604,"results":"169","hashOfConfig":"122"},{"size":491,"mtime":1613881973160,"results":"170","hashOfConfig":"122"},{"size":2175,"mtime":1615222425799,"results":"171","hashOfConfig":"122"},{"size":1925,"mtime":1615222428071,"results":"172","hashOfConfig":"122"},{"size":477,"mtime":1613883848634,"results":"173","hashOfConfig":"122"},{"size":1651,"mtime":1614542713521,"results":"174","hashOfConfig":"151"},{"size":651,"mtime":1615388055589,"results":"175","hashOfConfig":"122"},{"size":494,"mtime":1615350905661,"results":"176","hashOfConfig":"122"},{"size":448,"mtime":1615350644047,"results":"177","hashOfConfig":"122"},{"size":465,"mtime":1615350923777,"results":"178","hashOfConfig":"122"},{"size":1117,"mtime":1615384559664,"results":"179","hashOfConfig":"122"},{"size":2782,"mtime":1616431162297,"results":"180","hashOfConfig":"122"},{"size":5748,"mtime":1614736884994,"results":"181","hashOfConfig":"122"},{"size":676,"mtime":1615154140804,"results":"182","hashOfConfig":"122"},{"size":1177,"mtime":1614436109972,"results":"183","hashOfConfig":"122"},{"size":4388,"mtime":1614736912910,"results":"184","hashOfConfig":"122"},{"size":2290,"mtime":1614195949606,"results":"185","hashOfConfig":"122"},{"size":664,"mtime":1615155642255,"results":"186","hashOfConfig":"122"},{"size":359,"mtime":1614269783490,"results":"187","hashOfConfig":"122"},{"size":394,"mtime":1614282173934,"results":"188","hashOfConfig":"122"},{"size":3293,"mtime":1615223035178,"results":"189","hashOfConfig":"122"},{"size":526,"mtime":1614280335092,"results":"190","hashOfConfig":"122"},{"size":407,"mtime":1616516302986,"results":"191","hashOfConfig":"122"},{"size":240,"mtime":1614369188479,"results":"192","hashOfConfig":"122"},{"size":6115,"mtime":1615221445710,"results":"193","hashOfConfig":"122"},{"size":3766,"mtime":1615220437937,"results":"194","hashOfConfig":"122"},{"size":553,"mtime":1614446056986,"results":"195","hashOfConfig":"122"},{"size":4324,"mtime":1617295731478,"results":"196","hashOfConfig":"122"},{"size":5663,"mtime":1616888071662,"results":"197","hashOfConfig":"122"},{"size":1301,"mtime":1615222376532,"results":"198","hashOfConfig":"122"},{"size":7606,"mtime":1617295127040,"results":"199","hashOfConfig":"122"},{"size":3879,"mtime":1615922868216,"results":"200","hashOfConfig":"122"},{"size":3975,"mtime":1615922883840,"results":"201","hashOfConfig":"122"},{"size":2171,"mtime":1614883997048,"results":"202","hashOfConfig":"122"},{"size":4121,"mtime":1617232959434,"results":"203","hashOfConfig":"122"},{"size":4221,"mtime":1617294065005,"results":"204","hashOfConfig":"122"},{"size":1328,"mtime":1616784525360,"results":"205","hashOfConfig":"122"},{"size":8071,"mtime":1617894514076,"results":"206","hashOfConfig":"122"},{"size":2137,"mtime":1615222402496,"results":"207","hashOfConfig":"122"},{"size":202,"mtime":1614796239619,"results":"208","hashOfConfig":"122"},{"size":3661,"mtime":1617295455669,"results":"209","hashOfConfig":"122"},{"size":3418,"mtime":1617295326775,"results":"210","hashOfConfig":"122"},{"size":1645,"mtime":1617295757767,"results":"211","hashOfConfig":"122"},{"size":1496,"mtime":1616781724985,"results":"212","hashOfConfig":"122"},{"size":243,"mtime":1615835778684,"results":"213","hashOfConfig":"122"},{"size":832,"mtime":1617642181403,"results":"214","hashOfConfig":"122"},{"size":488,"mtime":1615222945457,"results":"215","hashOfConfig":"122"},{"size":525,"mtime":1611329867507,"results":"216","hashOfConfig":"122"},{"size":472,"mtime":1613881999356,"results":"217","hashOfConfig":"122"},{"size":472,"mtime":1613882058137,"results":"218","hashOfConfig":"122"},{"size":359,"mtime":1613858498843,"results":"219","hashOfConfig":"122"},{"size":26,"mtime":1615220363209,"results":"220","hashOfConfig":"122"},{"size":441,"mtime":1615350635814,"results":"221","hashOfConfig":"122"},{"size":1057,"mtime":1616519673500,"results":"222","hashOfConfig":"122"},{"size":2177,"mtime":1616771858312,"results":"223","hashOfConfig":"122"},{"size":945,"mtime":1616779658136,"results":"224","hashOfConfig":"122"},{"size":2568,"mtime":1616779937544,"results":"225","hashOfConfig":"122"},{"size":1099,"mtime":1616433490962,"results":"226","hashOfConfig":"151"},{"size":1025,"mtime":1616432095274,"results":"227","hashOfConfig":"122"},{"size":5826,"mtime":1616434189137,"results":"228","hashOfConfig":"122"},{"size":189,"mtime":1615765436068,"results":"229","hashOfConfig":"122"},{"size":931,"mtime":1616766784473,"results":"230","hashOfConfig":"122"},{"size":745,"mtime":1616431689612,"results":"231","hashOfConfig":"122"},{"size":508,"mtime":1616000478030,"results":"232","hashOfConfig":"122"},{"size":1861,"mtime":1616444220723,"results":"233","hashOfConfig":"122"},{"size":1275,"mtime":1616519709680,"results":"234","hashOfConfig":"122"},{"size":206,"mtime":1615835129856,"results":"235","hashOfConfig":"122"},{"size":1117,"mtime":1616450754379,"results":"236","hashOfConfig":"122"},{"size":809,"mtime":1616513742173,"results":"237","hashOfConfig":"122"},{"size":713,"mtime":1616532170706,"results":"238","hashOfConfig":"122"},{"size":1802,"mtime":1616770863488,"results":"239","hashOfConfig":"122"},{"size":310,"mtime":1616770991794,"results":"240","hashOfConfig":"122"},{"size":258,"mtime":1616771382681,"results":"241","hashOfConfig":"122"},{"size":1581,"mtime":1617642654046,"results":"242","hashOfConfig":"122"},{"size":1947,"mtime":1617642530720,"results":"243","hashOfConfig":"122"},{"size":491,"mtime":1617639499430,"results":"244","hashOfConfig":"122"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"247"},"1yay5ck",{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"247"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"247"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"247"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"247"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"258","usedDeprecatedRules":"247"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"247"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"247"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"247"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"247"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ybodc0",{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"247"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"247"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"277"},"y7oskr",{"filePath":"278","messages":"279","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"280","usedDeprecatedRules":"247"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"247"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"285"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"247"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"247"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"247"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"297","usedDeprecatedRules":"294"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"300","usedDeprecatedRules":"294"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"307"},"1kofhp9",{"filePath":"308","messages":"309","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"310","usedDeprecatedRules":"294"},{"filePath":"311","messages":"312","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"313","usedDeprecatedRules":"294"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"316","usedDeprecatedRules":"294"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"319","usedDeprecatedRules":"294"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"324","messages":"325","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"328","usedDeprecatedRules":"294"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"247"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"333","messages":"334","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"335","messages":"336","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"337","messages":"338","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"247"},{"filePath":"339","messages":"340","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"341","usedDeprecatedRules":"294"},{"filePath":"342","messages":"343","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"344","usedDeprecatedRules":"294"},{"filePath":"345","messages":"346","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"347","messages":"348","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"349","usedDeprecatedRules":"247"},{"filePath":"350","messages":"351","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"247"},{"filePath":"352","messages":"353","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"247"},{"filePath":"354","messages":"355","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"356","messages":"357","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"247"},{"filePath":"360","messages":"361","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"362","messages":"363","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"364","usedDeprecatedRules":"294"},{"filePath":"365","messages":"366","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"367","messages":"368","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"369","messages":"370","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"371","messages":"372","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"373","messages":"374","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"375","messages":"376","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"377","usedDeprecatedRules":"294"},{"filePath":"378","messages":"379","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"247"},{"filePath":"380","messages":"381","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"382","messages":"383","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"384","usedDeprecatedRules":"294"},{"filePath":"385","messages":"386","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"387","messages":"388","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"247"},{"filePath":"389","messages":"390","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"247"},{"filePath":"391","messages":"392","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"393","usedDeprecatedRules":"294"},{"filePath":"394","messages":"395","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"396","messages":"397","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"247"},{"filePath":"398","messages":"399","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"400","messages":"401","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"247"},{"filePath":"402","messages":"403","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"404","messages":"405","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"406","messages":"407","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"247"},{"filePath":"408","messages":"409","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"410","usedDeprecatedRules":"294"},{"filePath":"411","messages":"412","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"413","usedDeprecatedRules":"294"},{"filePath":"414","messages":"415","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"416","messages":"417","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"418","usedDeprecatedRules":"294"},{"filePath":"419","messages":"420","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"421","usedDeprecatedRules":"294"},{"filePath":"422","messages":"423","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"424","usedDeprecatedRules":"294"},{"filePath":"425","messages":"426","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"427","usedDeprecatedRules":"294"},{"filePath":"428","messages":"429","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"430","usedDeprecatedRules":"294"},{"filePath":"431","messages":"432","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"433","usedDeprecatedRules":"294"},{"filePath":"434","messages":"435","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"436","messages":"437","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"438","usedDeprecatedRules":"294"},{"filePath":"439","messages":"440","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"441","messages":"442","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"247"},{"filePath":"443","messages":"444","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"445","usedDeprecatedRules":"294"},{"filePath":"446","messages":"447","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"448","usedDeprecatedRules":"294"},{"filePath":"449","messages":"450","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"451","messages":"452","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"453","messages":"454","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"247"},{"filePath":"455","messages":"456","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"247"},{"filePath":"457","messages":"458","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"247"},{"filePath":"459","messages":"460","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"247"},{"filePath":"461","messages":"462","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"247"},{"filePath":"463","messages":"464","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"247"},{"filePath":"465","messages":"466","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"247"},{"filePath":"467","messages":"468","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"247"},{"filePath":"469","messages":"470","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"471","messages":"472","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"473","usedDeprecatedRules":"294"},{"filePath":"474","messages":"475","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"476","messages":"477","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"478","messages":"479","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"480","usedDeprecatedRules":"294"},{"filePath":"481","messages":"482","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"483","messages":"484","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"485","messages":"486","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"487","usedDeprecatedRules":"294"},{"filePath":"488","messages":"489","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"247"},{"filePath":"490","messages":"491","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"492","messages":"493","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"494","messages":"495","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"496","messages":"497","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"498","usedDeprecatedRules":"294"},{"filePath":"499","messages":"500","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"501","usedDeprecatedRules":"294"},{"filePath":"502","messages":"503","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"247"},{"filePath":"504","messages":"505","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"506","usedDeprecatedRules":"294"},{"filePath":"507","messages":"508","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"509","usedDeprecatedRules":"294"},{"filePath":"510","messages":"511","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"512","usedDeprecatedRules":"294"},{"filePath":"513","messages":"514","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"515","messages":"516","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"247"},{"filePath":"517","messages":"518","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"247"},{"filePath":"519","messages":"520","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"521","messages":"522","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"523","messages":"524","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"247"},"/home/aely/flureerecoil/src/index.js",[],["525","526"],"/home/aely/flureerecoil/src/utils/loadNetID.js",[],"/home/aely/flureerecoil/src/utils/flureeFetch.js",[],"/home/aely/flureerecoil/src/utils/loadWeb3.js",[],"/home/aely/flureerecoil/src/utils/loadContract.js",[],"/home/aely/flureerecoil/src/Recoil/contract.js",["527"],"import { atom, atomFamily, selector, selectorFamily } from 'recoil'\nimport loadNetID from 'src/utils/loadNetID'\nimport loadAccount from '../utils/loadAccount'\nimport loadContract from '../utils/loadContract'\nimport loadWeb3 from '../utils/loadWeb3'\nimport { forceUpdate } from '../Recoil'\nimport loadAccountBalance from '../utils/loadAccountBalance'\n\nexport const account = atom({\n    key: 'account',\n    default: '',\n    persistence_UNSTABLE: {\n        type: 'accessToken'\n    }\n})\n\nexport const productCount = atom({\n    key: 'productCount',\n    default: 0\n})\n\nexport const networkId = atom({\n    key: 'networkId',\n    default: 42,\n    persistence_UNSTABLE: {\n        type: 'accessToken'\n    }\n})\n\nexport const queryProduct = selectorFamily({\n    key: 'queryData',\n    get: param => async ({get}) => {\n        get(forceUpdate)\n        const methods = get(initializeContract)\n        console.log(methods)\n        const response = await methods.fetchProduct(param).call()\n        console.log(response)\n        return response\n    }\n})\n\n/*export const getProducts = selector({\n    key: 'getProducts',\n    get: async ({get}) => {\n        let response = []\n        const methods = get(initializeContract)\n        const count = await methods.productCount().call()\n        console.log(count)\n        for(let i = 1; i <= count; i++) {\n            const prod = await methods.product(i).call()\n            console.log(prod)\n            response[i - 1] = prod\n        }\n        \n        return response\n    }\n})*/\n\nexport const getCategoriesByname = selector({\n    key: 'getCategoriesByName',\n    get: async ({get}) => {\n        get(forceUpdate)\n        let response = []\n        const methods = get(initializeContract)\n        const count = await methods.categoryCount().call()\n        for(let i = 1; i <= count; i++) {\n            const cat = await methods.category(i).call()\n            console.log(cat)\n            response[i - 1] = cat\n        }\n        \n        return response\n    }\n}) \n\nexport const getCategoryCount = selector({\n    key: 'getCategoryCount',\n    get: async ({get}) => {\n        get(forceUpdate)\n        const methods = get(initializeContract)\n        const response = await methods.categoryCount().call()\n        console.log(response)\n        return response\n    }\n})\n\nexport const getProductCount = selector({\n    key: 'getProductCount',\n    get: async ({get}) => {\n        get(forceUpdate)\n        const methods = get(initializeContract)\n        const response = await methods.productCount().call()\n        console.log(response)\n        return response\n    }\n})\n\nexport const initializeContract = selector({\n    key: 'initializeContract',\n    get: async ({get}) => {\n        try {\n            get(forceUpdate)\n            await loadWeb3()\n            const response = await loadContract();\n            return response.methods\n        } catch (error) {\n            console.log(error)\n        }\n      }\n})\n\nexport const initializeAccount = selector({\n    key: 'initializeAccount',\n    get: async ({get}) => {\n        try {\n            get(forceUpdate)\n            await loadWeb3()\n            const response = await loadAccount();\n            return response\n        } catch (error) {\n            console.log(error)\n        }\n      }\n})\n\nexport const getNetworkId = selector({\n    key: 'getNetowrkId',\n    get: async ({get}) => {\n        try {\n            get(forceUpdate)\n            await loadWeb3()\n            const response = await loadNetID()\n            return response\n        } catch(error) {\n            console.log(error)\n        }\n    }\n})\n\nexport const etherBalance = selectorFamily({\n    key: 'etherBalance',\n    get: param => async ({get}) => {\n        try {\n            get(forceUpdate)\n            await loadWeb3()\n            const response = await loadAccountBalance(param)\n            return response\n        } catch(error) {\n            console.log(error)\n        }\n    }\n})","/home/aely/flureerecoil/src/utils/loadAccount.js",[],"/home/aely/flureerecoil/src/queries/fetchTerpenes.js",[],"/home/aely/flureerecoil/src/queries/fetchCannabinoids.js",[],"/home/aely/flureerecoil/src/queries/fetchProducts.js",[],"/home/aely/flureerecoil/src/DebugObserver.js",[],"/home/aely/flureerecoil/src/ws.js",[],"/home/aely/flureerecoil/src/exws.js",[],"/home/aely/flureerecoil/src/queries/getUser.js",[],"/home/aely/flureerecoil/src/utils/axiosLogin.js",[],["528","529"],"/home/aely/flureerecoil/src/Recoil/erc777.js",["530"],"import { atom, atomFamily, selector, selectorFamily } from 'recoil'\nimport loadERC777 from '../utils/loadERC777'\nimport loadWeb3 from '../utils/loadWeb3'\nimport { forceUpdate } from '../Recoil'\n\nexport const balance = atomFamily({\n    key: 'balance',\n    default: selectorFamily({\n        key: 'getMATbalance',\n        get: (param) => async ({get}) => {\n            get(forceUpdate)\n            const methods = get(initializeERC777)\n            console.log(methods)\n            const response = await methods.balanceOf(param).call()\n            console.log(response)\n            return response\n        }\n    }),\n    dangerouslyAllowMutability: true,\n})\n\nexport const getSymbol = selector({\n    key: 'getSymbol',\n    get: async ({get}) => {\n        try {\n            const methods = get(initializeERC777);\n            const response = await methods.symbol().call()\n            return response\n        } catch (error) {\n            console.log(error)\n        }\n      }\n})\n\nexport const initializeERC777 = selector({\n    key: 'initializeERC777',\n    get: async () => {\n        try {\n            await loadWeb3()\n            const response = await loadERC777();\n            return response.methods\n        } catch (error) {\n            console.log(error)\n        }\n      }\n})","/home/aely/flureerecoil/src/utils/loadERC777.js",[],"/home/aely/flureerecoil/src/utils/getLiveETHUSD.js",[],["531","532"],"/home/aely/flureerecoil/src/utils/useInterval.js",[],"/home/aely/flureerecoil/src/queries/addTerpene.js",[],"/home/aely/flureerecoil/src/queries/addCannabinoid.js",[],"/home/aely/flureerecoil/src/Components/Cart.tsx",[],["533","534"],"/home/aely/flureerecoil/src/Pages/Checkout.tsx",["535","536"],"import { FunctionComponent, useState } from 'react'\nimport { Button, Badge } from 'react-bootstrap'\nimport { cart as items, \n         totalCost, \n         balance as bal,\n         initializeERC777,\n         account as address,\n         forceUpdate } from '../Recoil'\nimport { useRecoilState, useRecoilValue, useSetRecoilState } from 'recoil'\n//import getLiveETHUSD from '../utils/getLiveETHUSD'\nimport { useInterval } from '../utils/useInterval'\nimport Cart from '../Components/Cart.tsx'\nimport Loader from '../Components/Loader.tsx'\n\nconst Checkout: FunctionComponent = (props: any) => {\n    \n    const [loading, setloading] = useState(false)\n    const account: string = useRecoilValue(address)\n    const [count, setCount] = useState<number>(0)\n    const [balance, setBalance] = useRecoilState<number>(bal(account))\n    const methods = useRecoilValue(initializeERC777)\n    const cost = useRecoilValue(totalCost)\n    const setCart = useSetRecoilState(items)\n    const update: Function = useSetRecoilState(forceUpdate)\n\n    useInterval(() => {\n        if(loading) {\n            setCount(count + 1)\n        }\n    }, 1000)\n\n    const makePayment = async () => {\n        try {\n            let total = window.web3.utils.toWei(`${cost}`, 'Finney')\n            setloading(true)\n            await methods.transfer('0x1Bbf5cEC49499336287E12e812e7366Ee2063074', total).send({ from: account })\n            setCart([])\n            update(Math.random())\n            setloading(false)\n            props.history.push('/')\n        } catch(error) {\n            console.log(error)\n            setloading(false)\n        }\n    }\n    const ethPayment = async () => {\n        try {\n            //const conversion = await getLiveETHUSD()\n            let total: number = 0\n            total = window.web3.utils.toWei(`${cost}`, 'Finney')\n            setloading(true)\n            await window.web3.eth.sendTransaction({from: account, to: '0x1Bbf5cEC49499336287E12e812e7366Ee2063074', value: total})\n            setCart([])\n            update(Math.random())\n            setloading(false)\n            props.history.push('/')\n        } catch(error) {\n            console.log(error)\n            setloading(false)\n        }\n    }\n\n    const renderLoading = () => {\n        return(\n            <div>\n                <h2 style={{textAlign: 'center', marginTop: '10%'}}>Please wait for transaction confirmation...</h2>\n                <h5 style={{textAlign: 'center'}}>{count}</h5>\n                <br />\n                <Loader type={`pacman`} />\n            </div>\n        )\n    }\n    \n    const renderPage = () => {\n        return(\n            <>\n                <Cart {...props} />\n                <br />\n                <h1>Balance:</h1>\n                <p>{balance}</p>\n                <Button variant='success' onClick={makePayment}>Purchase</Button>\n                <Button variant='success' onClick={ethPayment}>Pay with Matic</Button>\n            </>\n        )\n    }\n    return(\n        <div style={{margin: 'auto', textAlign: 'center'}}>\n            {!loading && renderPage()}\n            {loading && renderLoading()}\n            <br/>\n            <br/>\n        </div>\n    )\n}\n\nexport default Checkout","/home/aely/flureerecoil/src/App.tsx",["537","538"],"import { useEffect, FunctionComponent } from 'react'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport { useRecoilState, useSetRecoilState, useRecoilValue } from 'recoil'\nimport useWebsocket from './utils/useWebsocket.tsx'\nimport { bgImage, width as w, sidebarWidth as sw, getRefToken, refreshToken, networkId as ni, getNetworkId as gni, account, initializeAccount, rtl as r, toggled as t, getToken, accessToken, userProfile as prf, getUserProfile as getPrf, getTokenExp, expTime } from './Recoil'\nimport { UserProfile } from './types/types.ts'\n//import Landing from './Components/Landing.tsx'\nimport Checkout from './Pages/Checkout.tsx';\nimport Spotify from './Pages/Spotify.tsx'\nimport AddTerpene from './Components/AddTerpene.tsx';\nimport Cannabinoid from './Components/AddCannabinoid.tsx';\nimport ManageCannabinoids from './Pages/ManageCannabinoids.tsx'\nimport ManageTerpenes from './Pages/ManageTerpenes'\nimport ManageCustomers from './Pages/ManageCustomers';\nimport Dashboard from './Components/Dashboard';\nimport ManageProducts from './Pages/ManageProducts';\nimport MySidebar from './Components/MySidebar.tsx'\nimport useTransListener from './utils/useTransListener.tsx'\nimport useSidebarWidth from './utils/useSidebarWidth.tsx'\nimport useViewport from './utils/useViewport.tsx'\nimport NewSidebarBgImage from './Components/NewSidebarBgImage.tsx'\nimport 'react-pro-sidebar/dist/css/styles.css';\n\nconst App: FunctionComponent = () => {\n\n  useWebsocket()\n  useTransListener()\n  useSidebarWidth()\n  useViewport()\n  \n  const [networkId, setNetworkId] = useRecoilState<number>(ni)\n  const getNetworkId: number = useRecoilValue(gni)\n  const getExp: number = useRecoilValue(getTokenExp)\n  const setExpTime: Function = useSetRecoilState(expTime)\n  const currentExpTime: number = useRecoilValue(expTime)\n  const setAccess: Function = useSetRecoilState(accessToken)\n  const token: string = useRecoilValue(getToken)\n  const setRefToken: Function = useSetRecoilState(refreshToken)\n  const refToken: string = useRecoilValue(getRefToken)\n  const setAccount: Function = useSetRecoilState(account)\n  const acct: string = useRecoilValue(initializeAccount)\n  const getUserProfile: UserProfile = useRecoilValue(getPrf)\n  const setUserProfile: Function = useSetRecoilState(prf)\n  const toggled: boolean = useRecoilValue(t)\n  const rtl: boolean = useRecoilValue(r)\n  const sidebarWidth: number = useRecoilValue(sw)\n  const width: number = useRecoilValue(w)\n\n  const derivedWidth: number = width - sidebarWidth\n\n  useEffect(() => {\n    setNetworkId(getNetworkId)\n    setAccess(token)\n    setAccount(acct)\n    setRefToken(refToken)\n    setUserProfile(getUserProfile)\n    if(currentExpTime < 1 || currentExpTime === undefined) {\n      setExpTime(getExp)\n    } \n  }, [refToken, setRefToken, currentExpTime, acct, setAccount, token, setAccess, getUserProfile, setUserProfile, getExp, setExpTime, getNetworkId, setNetworkId])\n\n  return (\n    <Router>\n      <div style={{overflowX: 'hidden'}} className={`app ${rtl ? 'rtl' : ''} ${toggled ? 'toggled' : ''}`}>\n        <MySidebar />\n        <div style={{width: `${derivedWidth}px`, transform: `translate(${sidebarWidth}px, 0)`, transition: 'transform .15s linear'}}>\n      <Switch>\n        <Route component={Dashboard} exact path='/' />\n        <Route component={Checkout} path='/checkout' />\n        <Route component={Spotify} path='/spotify' />\n        <Route component={NewSidebarBgImage} path='/newSidebarImage' />\n        <Route component={AddTerpene} path='/addTerpene' />\n        <Route component={Cannabinoid} path='/addCannabinoid' />\n        <Route component={ManageCannabinoids} path='/editCannabinoid' />\n        <Route component={ManageTerpenes} path='/editTerpene' />\n        <Route component={ManageCustomers} path='/editCustomer' />\n        <Route component={ManageProducts} path='/editProduct' /><Route component={Dashboard} exact path='/' />\n        <Route component={Checkout} path='/checkout' />\n        <Route component={Spotify} path='/spotify' />\n        <Route component={AddTerpene} path='/addTerpene' />\n        <Route component={Cannabinoid} path='/addCannabinoid' />\n        <Route component={ManageCannabinoids} path='/editCannabinoid' />\n        <Route component={ManageTerpenes} path='/editTerpene' />\n        <Route component={ManageCustomers} path='/editCustomer' />\n        <Route component={ManageProducts} path='/editProduct' />\n      </Switch>\n      </div>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","/home/aely/flureerecoil/src/reportWebVitals.ts",[],"/home/aely/flureerecoil/src/Components/Loader.tsx",[],"/home/aely/flureerecoil/src/Components/Landing.tsx",[],["539","540"],"/home/aely/flureerecoil/src/Components/Test2.tsx",["541"],"import { Input, Button } from 'reactstrap'\nimport { useState, useEffect, useRef, RefObject } from 'react'\nimport { initializeAccount, msgStateList  } from '../Recoil'\nimport { useRecoilValue, useResetRecoilState } from 'recoil'\nimport { MySyntheticEvent } from '../types'\nimport { send } from '../ws'\n\ntype MsgList = {\n  message: string,\n  from: string\n}\n\nfunction Test2() {\n  const [newMessage, setNewMessage] = useState<string>('')\n  const account: string = useRecoilValue(initializeAccount)\n  const messageList: MsgList[] = useRecoilValue(msgStateList)\n  const msgRef: RefObject<any> = useRef(null)\n  const [loading, setLoading] = useState<boolean>(true)\n\n  function handleClick() {\n    if(newMessage.length > 0) {\n        send('msg.new', newMessage, `${account}`)\n        setNewMessage('')\n    }\n  }\n\n  const ClearMessages = () => {\n      const clear: any = useResetRecoilState(msgStateList)\n      return <Button color='danger' onClick={clear}>Clear</Button>\n  }\n\n  const onChange = ({target: {value}}: MySyntheticEvent) => {\n    setNewMessage(value);\n  };\n  \n  useEffect(() => {\n    if(loading) {\n      msgRef.current.focus()\n      setLoading(false)\n    }\n  }, [])\n\n  return (\n    <>\n        {ClearMessages()}\n        <h4>{messageList.length > 0 && messageList.map((message, index) => {\n            return(\n                <p key={index}>\n                   {message.from}: {message.message}\n                </p>\n            )\n        })}</h4>\n        <Input style={{maxWidth: '50%', margin: '0 auto'}} innerRef={msgRef} type='text' id='message' name='message' value={newMessage} onChange={onChange} />\n        <Button\n          color='success'\n          target=\"_blank\"\n          onClick={handleClick}\n        >\n          Send Message\n        </Button>\n    </>\n  );\n}\n\nexport default Test2;\n","/home/aely/flureerecoil/src/Components/Test.tsx",["542"],"import '../App.css';\nimport Test2 from './Test2.tsx'\nimport { getProducts } from '../Recoil'\nimport { useRecoilValue } from 'recoil'\nimport { Link } from 'react-router-dom'\nimport Test3 from './Test3.tsx'\nimport Test4 from './Test4.tsx'\nimport { Product } from '../types'\n\nconst Test: Function = () => {\n\n  const products: Product[] = useRecoilValue(getProducts)\n  \n  return (\n    <div className=\"App\">\n        <Test2 />\n        <br />\n          <Test3 />\n          <br />\n          <Test4 products={products} />\n    </div>\n  );\n}\n\nexport default Test;\n","/home/aely/flureerecoil/src/Recoil/fluree.tsx",["543","544","545"],"import { atom, selector, selectorFamily } from 'recoil'\nimport { initProduct } from 'src/types/types'\nimport { fetchCannabinoidProducts, getMyPurchases, fetchProduct, fetchProducts, fetchTerpeneProducts, fetchTerpenes, fetchCategories, fetchCannabinoids } from '../queries'\nimport { initCannabinoids, initTerpenes, initLocation, Cannabinoid, Product } from '../types'\nimport { localStorageEffect } from '../utils/localStorageEffect.tsx'\nimport { getBgImages } from '../queries/getBgImages'\n\n\nexport const forceUpdate = atom<number>({\n    key: 'forceUpdate',\n    default: 0\n})\n\nexport const handle = atom<string>({\n    key: 'handle',\n    default: '',\n    persistence_UNSTABLE: {\n        type: 'handle'\n    }\n})\n\nexport const terphandle = atom<string>({\n    key: 'terphandle',\n    default: ''\n})\n\nexport const userToken = atom<string>({\n    key: 'userToken',\n    default: '',\n    persistence_UNSTABLE: {\n        type: 'userToken'\n    }\n})\n\nexport const locations = atom({\n    key: 'locations',\n    default: [initLocation()]\n})\n\nexport const terpenes = atom({\n    key: 'terpenes',\n    default: [initTerpenes()],\n    dangerouslyAllowMutability: true\n})\n\nexport const products = atom({\n    key: 'products',\n    default: []\n})\n\nexport const cannabinoids = atom<Array<Cannabinoid>>({\n    key: 'cannabinoids',\n    default: [initCannabinoids()]\n})\n\nexport const bgImage = selector({\n    key: 'bgImage',\n    get: async ({get}) => {\n        try {\n            get(forceUpdate)\n            const response = await getBgImages()\n            return response[0]['sidebar/imageHashes']\n        } catch(error) {\n            console.log(error)\n        }\n    }\n})\n\nexport const getTerpenes = selector({\n    key: 'getTerpenes',\n    get: async ({get}) => {\n        try {\n            get(forceUpdate)\n            const response = await fetchTerpenes();\n            return response\n        } catch (error) {\n            console.log(error)\n        }\n      },\n    dangerouslyAllowMutability: true\n})\n\nexport const getCannabinoids = selector({\n    key: 'getCannabinoids',\n    get: async ({get}) => {\n        try {\n            get(forceUpdate)\n            const response = await fetchCannabinoids();\n            console.log(response)\n            return response\n        } catch (error) {\n            console.log(error)\n        }\n      }\n})\n\nexport const getCategories = selector({\n    key: 'getCategories',\n    get: async ({get}) => {\n        try {\n            get(forceUpdate)\n            const response = await fetchCategories();\n            console.log(response)\n            return response\n        } catch (error) {\n            console.log(error)\n        }\n      }\n})\n\n\nexport const getProduct = selectorFamily({\n    key: 'getProduct',\n    get: param => async ({get}) => {\n        try {\n            get(forceUpdate)\n            const response = await fetchProduct(param);\n            console.log(response)\n            return response\n        } catch (error) {\n            console.log(error)\n        }\n      }\n})\n\nexport const getProductsByTerpene = selector({\n    key: 'getProductsByTerpene',\n    get: async ({get}) => {\n        try {\n            const param: string = get(terphandle)\n            const response = await fetchTerpeneProducts(param)\n            console.log(response[0]['terpene/products'])\n            return response[0]['terpene/products']\n        } catch(error) {\n            console.log(error)\n        }\n    }\n})\n\nexport const getProductsByCannabinoid = selector({\n    key: 'getProductsByCannabinoid',\n    get: async ({get}) => {\n        try {\n            const param: string = get(terphandle)\n            const response = await fetchCannabinoidProducts(param)\n            return response\n        } catch(error) {\n            console.log(error)\n        }\n    }\n})\n\nexport const getProducts = selector({\n    key: 'getProducts',\n    get: async ({}) => {\n        try {\n            const response = await fetchProducts();\n            return response\n        } catch (error) {\n            console.log(error)\n        }\n      }\n})\n\nexport const getCustomerPurchases = selectorFamily({\n    key: 'getCustomerPurchases',\n    get: (param) => async ({get}) => {\n        try{\n            get(forceUpdate)\n            const response = await getMyPurchases(param)\n            return response\n        } catch (error) {\n            console.log(error)\n        }\n    }\n})\n\nexport const filteredProducts = atom<Array<Product>>({\n    key: 'filteredProducts',\n    default: [],\n    persistence_UNSTABLE: {\n        type: 'filteredProducts'\n    }\n})\n\nexport const setFilteredProducts = selector({\n    key: 'setFilteredProducts',\n    set: ({get, set, reset}, message) => {\n        console.log(message)\n        reset(filteredProducts)\n        switch(message.type) {\n            case 'filter.name': {\n                const allProducts: Product[] = get(getProducts)\n                const filter: Product[] = allProducts.filter(prop => {\n                    return prop['product/name'].toLowerCase().includes(message.data.message)\n                })\n                set(filteredProducts, filter)\n                break;\n            }\n            case 'filter.cat': {\n                const allProducts: Product[] = get(getProducts)\n                const filter: Product[] = allProducts.filter(prop => {\n                    return prop['product/category']['category/name'].includes(message.data.message)\n                })\n                set(filteredProducts, filter)\n                break;\n            }\n            case 'filter.terpene': {\n                get(forceUpdate)\n                let id: string = message.data.message.id\n                let filtered: Product[] = message.data.message.filter\n                let a: any = []\n                let sortedFilter: any = []\n                for(let i: number = 0; i < filtered.length; i++) {\n                    let b: any = filtered[i]['product/productProfileId']['productprofile/terpConc']\n                    for(let j: number = 0; j < b.length; j++){\n                        console.log(b[j], JSON.parse(b[j]), id, b[j][id])\n                        if(JSON.parse(b[j])[id] !== undefined) {\n                            const element: any = {concentration: JSON.parse(b[j])[id], product: filtered[i]['_id']}\n                            a.push(element)\n                        }\n                    }\n                }\n                a.sort((x, y) => y.concentration - x.concentration)\n                for(let k: number = 0; k < a.length; k++) {\n                    for(let l: number = 0; l < filtered.length; l++) {\n                        if(a[k].product === filtered[l]['_id']) {\n                            sortedFilter.push(filtered[l])\n                        }\n                    }\n                }\n                set(filteredProducts, sortedFilter)\n                break;\n            }\n            case 'filter.cannabinoid': {\n                get(forceUpdate)\n                const filtered: Product[] = message.data.message.filter\n                const id: string = message.data.message.id\n                let a: any = []\n                let sortedFilter: Product[] = []\n                for(let i: number = 0; i < filtered.length; i++) {\n                    let b: any = filtered[i]['product/productProfileId']['productprofile/cannConc']\n                    for(let j: number = 0; j < b.length; j++) {\n                        if(JSON.parse(b[j])[id] !== undefined) {\n                            const element: any = {concentration: JSON.parse(b[j])[id], product: filtered[i]['_id']}\n                            a.push(element)\n                        }\n                    }\n                }\n                a.sort((x, y) => y.concentration - x.concentration)\n                for(let k: number = 0; k < a.length; k++) {\n                    for(let l: number = 0; l < filtered.length; l++) {\n                        if(a[k].product === filtered[l]['_id']) {\n                            sortedFilter.push(filtered[l])\n                        }\n                    }\n                }\n                console.log(sortedFilter)\n                set(filteredProducts, sortedFilter)\n                break;\n            }\n            default: break;\n        }\n    }\n})","/home/aely/flureerecoil/src/Components/Test4.tsx",["546","547","548","549"],"import { Button } from 'reactstrap'\nimport { resetCart, cart as items, updateTotalCost, account as a } from '../Recoil'\nimport { useRecoilValue, useSetRecoilState } from 'recoil'\nimport '../App.css';\nimport { Item, Product } from '../types/types'\nimport { send } from '../ws'\nimport { useEffect } from 'react';\n\ninterface PropTypes {\n    products: Product[]\n}\n\nexport default function Test4 (props: PropTypes) {\n\n    const cart: Item[] = useRecoilValue(items)\n    const account: string = useRecoilValue(a)\n\n    const addToCart: Function = (data: Product, crt: Item[]) => {\n        const payload: any = { cart: crt, item: data }\n        send('add.to.cart', payload, account)\n    }\n\n    return(\n        <div className='App'>\n            Product: <br /> {props.products && props.products.map(a => {\n                return(\n                    <p key={a['_id']} >\n                        {a['product/name']}  {a['product/cost']} <Button color='success' onClick={() => addToCart(a, cart)}>Add To Cart</Button>\n                    </p>\n                )\n            })}\n        </div>\n    )\n}","/home/aely/flureerecoil/src/Recoil/socket.tsx",[],"/home/aely/flureerecoil/src/Components/Test3.tsx",[],"/home/aely/flureerecoil/src/types/types.ts",[],"/home/aely/flureerecoil/src/Recoil/spotify.tsx",["550","551","552","553","554","555","556"],"\nimport { atom, atomFamily, selector, selectorFamily, useRecoilCallback } from 'recoil'\nimport { getPlaylist } from '../queries/getPlaylist'\nimport { getPlayer } from '../queries/getPlayer'\nimport { token } from '../queries/getUser'\nimport { initUser, UserProfile } from '../types/types.ts'\n\nexport const api = atom({\n    key: 'api',\n    default: 'https://api.spotify.com/v1/'\n})\n\nexport const expTime = atom<number>({\n    key: 'expTime',\n    default: 0,\n    persistence_UNSTABLE: {\n        type: 'expTime'\n    }\n})\n\nexport const playerUri = atom<string>({\n    key: 'playerUri',\n    default: '',\n    persistence_UNSTABLE: {\n        type: 'playerUri'\n    }\n})\n\nexport const accessToken = atom<string>({\n    key: 'accessToken',\n    default: '',\n    persistence_UNSTABLE: {\n        type: 'accessToken'\n    }\n})\n\nexport const refreshToken = atom<string>({\n    key: 'refreshToken',\n    default: '',\n    persistence_UNSTABLE: {\n        type: 'refreshToken'\n    }\n})\n\nexport const userProfile = atom<UserProfile>({\n    key: 'userProfile',\n    default: initUser(),\n    persistence_UNSTABLE: {\n        type: 'userProfile'\n    }\n})\n\nexport const getUserProfile = selector({\n    key: 'getUserProfile',\n    get: async ({}) => {\n        const response = await token()\n        return response.data.prf\n    }\n})\n\nexport const getToken = selector({\n    key: 'getToken',\n    get: async ({}) => {\n        const response = await token()\n        console.log(response)\n        return response.data.acc_token\n    }\n})\n\nexport const getRefToken = selector({\n    key: 'getRefToken',\n    get: async ({}) => {\n        const response = await token()\n        return response.data.ref_token\n    }\n})\n\nexport const getTokenExp = selector({\n    key: 'getTokenExp',\n    get: async ({}) => {\n        const response = await token()\n        console.log(response)\n        return response.data.exp\n    }\n})\n\nexport const getMyPlayer = selector({\n    key: 'getMyPlayer',\n    get: async ({get}) => {\n        try {\n            const token: string = get(accessToken)\n            console.log(token)\n            const response = await getPlayer(token)\n            console.log(response)\n        return response.data.exp\n        } catch (error) {\n            console.log(error)\n        }\n    }\n})\n\nexport const getMyPlaylist = selector({\n    key: 'getMyPlaylist',\n    get: async ({get}) => {\n        try {\n            const token: string = get(accessToken)\n            console.log(token)\n            const response = await getPlaylist(token)\n            console.log(response)\n            return response\n        } catch (error) {\n            console.log(error)\n        }\n    }\n})\n","/home/aely/flureerecoil/src/queries/getPlaylist.js",[],"/home/aely/flureerecoil/src/Components/SpotifyPlayer.tsx",[],"/home/aely/flureerecoil/src/utils/useWebsocket.tsx",[],"/home/aely/flureerecoil/src/Components/Exp.tsx",[],"/home/aely/flureerecoil/src/queries/getPlayer.js",[],"/home/aely/flureerecoil/src/Components/SpotifySearch.tsx",["557"],"import { ChangeEventHandler, FunctionComponent, useState, useRef, RefObject, useEffect } from 'react'\nimport { accessToken } from '../Recoil'\nimport { useRecoilValue } from 'recoil'\nimport { getAlbumTracks, getArtistAlbums, searchSpotify } from '../queries'\nimport { Form, FormGroup, Input, Label, Button } from 'reactstrap'\nimport { MySyntheticEvent } from '../types'\nimport { getShowEpisodes } from '../queries'\nimport RenderArtists from './RenderArtists.tsx'\nimport RenderTracks from './RenderTracks.tsx'\nimport RenderArtistAlbums from './RenderArtistAlbums.tsx'\nimport RenderAlbumTracks from './RenderAlbumTracks.tsx'\nimport RenderShows from './RenderShows.tsx'\nimport RenderEpisodes from './RenderEpisodes.tsx'\n\n\nconst Player: FunctionComponent = (props: any) => {\n\n    const searchRef = useRef<RefObject<any>>(null)\n\n    const token: string = useRecoilValue(accessToken)\n    const [term, setTerm] = useState<string>('')\n    const [type, setType] = useState<string>('artist')\n    const [artists, setArtists] = useState<any>([])\n    const [tracks, setTracks] = useState<any>([])\n    const [shows, setShows] = useState<any>([])\n    const [episodes, setShowEpisodes] = useState<any>([])\n    const [albumTracks, setAlbumTracks] = useState<any>([])\n    const [albums, setAlbums] = useState<any>([])\n    const [loading, setLoading] = useState<boolean>(true)\n    \n    const handleChange: ChangeEventHandler = ({target: {value, id}}: MySyntheticEvent) => {\n        switch(id) {\n            case 'searchType': {\n                setType(value)\n                break;\n            }\n            case 'searchText': {\n                setTerm(value)\n                break;\n            }\n            default: {\n                break;\n            }\n        }\n    }\n\n    const setArtistAlbums: Function = async (artistId: string) => {\n        const response = await getArtistAlbums(token, artistId)\n        setAlbums(response)\n        setArtists([])\n    }\n\n    const _setAlbumTracks: Function = async (albumId: string) => {\n        const response = await getAlbumTracks(token, albumId)\n        setAlbumTracks(response)\n        setAlbums([])\n    }\n\n    const _setShowEpisodes: Function = async (showId: string) => {\n        const response = await getShowEpisodes(token, showId)\n        setShowEpisodes(response)\n        setShows([])\n    }\n\n    const send: Function = async () => {\n        const response = await searchSpotify(token, term, type)\n        switch(type) {\n            case 'artist': {\n                setArtists([])\n                setArtists(response.artists.items)\n                setTracks([])\n                setAlbumTracks([])\n                setAlbums([])\n                setShows([])\n                console.log(artists)\n                break;\n            }\n            case 'track': {\n                setTracks([])\n                setTracks(response.tracks.items)\n                setArtists([])\n                setAlbums([])\n                setAlbumTracks([])\n                setShows([])\n                console.log(tracks)\n                break;\n            }\n            case 'show': {\n                setShows([])\n                setShows(response.shows.items)\n                setArtists([])\n                setAlbums([])\n                setAlbumTracks([])\n                console.log(shows)\n                break;\n            }\n            default: {\n                break;\n            }\n        }\n    }\n\n    useEffect(() => {\n        if(loading) {\n            searchRef.current.focus()\n            setLoading(false)\n        }\n    }, [])\n\n    const renderForm: Function = () => {\n        return(\n            <Form>\n                <FormGroup>\n                    <Label for='track'>Search Text</Label>\n                    <Input type='text' id='searchText' innerRef={searchRef} value={term} onChange={handleChange} />\n                </FormGroup>\n                <FormGroup>\n                    <Label for='track'>Search By:</Label>\n                    <Input type='select' name='searchType' id='searchType' value={type} onChange={handleChange}>\n                        <option>artist</option>\n                        <option>track</option>\n                        <option>show</option>\n                    </Input>\n                </FormGroup>\n                <Button color='success' style={{margin: 'auto', display: 'block'}} onClick={() => send()}>Search</Button>\n            </Form>\n        )\n    }\n\n    return(\n        <>\n            <h3 style={{textAlign: 'center'}}>Search by {type}:</h3>\n            {renderForm()}\n            <br/>\n            {artists.length > 0 && <RenderArtists artists={artists} getArtistAlbums={setArtistAlbums} />}\n            {albums.length > 0 && <RenderArtistAlbums albums={albums} getAlbumTracks={_setAlbumTracks} />}\n            {albumTracks.length > 0 && <RenderAlbumTracks tracks={albumTracks} token={token} />}\n            {tracks.length > 0 && <RenderTracks tracks={tracks} />}\n            {shows.length > 0 && <RenderShows shows={shows} getEpisodes={_setShowEpisodes} />}\n            {episodes.length > 0 && <RenderEpisodes episodes={episodes} />}\n        </>\n    )\n}\n\nexport default Player","/home/aely/flureerecoil/src/Components/RenderArtists.tsx",["558"],"import { useEffect } from 'react'\nimport { Table, Button } from 'reactstrap'\nimport { playerUri } from '../Recoil'\nimport { useSetRecoilState } from 'recoil'\n\ntype Images = {\n    url: string\n}\n\ntype Info = {\n    name: string,\n    images: Images[],\n    uri: string,\n    id: string\n}\n\ninterface PropTypes {\n    artists: Info[],\n    getArtistAlbums: Function\n}\n\nconst RenderArtists: Function = (props: PropTypes) => {\n\n    console.log(props)\n\n    const setUri: Function = useSetRecoilState(playerUri)\n\n    const play: Function = (newUri: string) => {\n        setUri(newUri)\n        console.log(newUri)\n    }\n\n    return(\n        <Table striped responsive style={{maxWidth: '75%', marginLeft: 'auto', marginRight: 'auto'}}>\n            <thead>\n                <tr>\n                    <th>\n                        Artist Name\n                    </th>\n                    <th>\n                        Image\n                    </th>\n                </tr>\n            </thead>\n            <tbody>\n                {props.artists.length > 0 && props.artists.map(artist => {\n                    return(\n                        <tr key={artist.id}>\n                            <td>\n                                {artist.name} <Button color='success' onClick={() => props.getArtistAlbums(artist.id)}>Get Albums</Button>\n                            </td>\n                            <td>\n                                {artist.images.length > 0 && window.innerWidth > 600 && <img src={artist.images[1].url} alt={artist.name} />}\n                                {artist.images.length > 0 && window.innerWidth <= 600 && <img src={artist.images[2].url} alt={artist.name} />}\n                            </td>\n                            <td>\n                                <Button color='success' onClick={() => play(artist.uri)}>Play</Button>\n                            </td>\n                        </tr>\n                    )\n                })}\n            </tbody>\n        </Table>\n    )\n}\n\nexport default RenderArtists","/home/aely/flureerecoil/src/Components/RenderTracks.tsx",[],"/home/aely/flureerecoil/src/queries/searchSpotify.js",["559"],"import axios from 'axios'\n\nexport const searchSpotify = async (token, term, type) => {\n    term.replace(/\\ /g, '%20')\n    console.log(term)\n    const response = await axios({\n        url: `https://api.spotify.com/v1/search?q=${term}&type=${type}`,\n        method: 'GET',\n        headers: {  'Authorization': 'Bearer ' + token,\n                    'Content-Type': 'application/json'\n        },\n    })\n    console.log(response)\n    return response.data\n}","/home/aely/flureerecoil/src/queries/getAlbumTracks.js",[],"/home/aely/flureerecoil/src/queries/getArtistAlbums.js",[],"/home/aely/flureerecoil/src/Components/RenderArtistAlbums.tsx",[],"/home/aely/flureerecoil/src/Components/RenderAlbumTracks.tsx",[],"/home/aely/flureerecoil/src/queries/addToMyTracks.js",[],"/home/aely/flureerecoil/src/Components/MyNavbar.tsx",[],"/home/aely/flureerecoil/src/Pages/Spotify.tsx",["560"],"import { FunctionComponent } from 'react'\nimport SpotifySearch from '../Components/SpotifySearch'\nimport Player from '../Components/SpotifyPlayer.tsx'\nimport Exp from '../Components/Exp.tsx'\n\n\nconst Spotify: FunctionComponent = () => {\n\n    return(\n        <div style={{marginLeft: '10%', marginRight: '10%', backgroundColor: '#eee', textAlign: 'center'}}>\n            <br/>\n            <Exp />\n            <br/>\n            <a href='/auth/spotify' >Login to Spotify</a>\n            <h1 style={{textAlign: 'center'}}>Manage Your Spotify Account Here:</h1>\n            <br />\n            <SpotifySearch />\n        </div>\n    )\n}\n\nexport default Spotify","/home/aely/flureerecoil/src/Components/Loaders/Circles.tsx",[],"/home/aely/flureerecoil/src/Components/Loaders/Rings.tsx",[],"/home/aely/flureerecoil/src/Components/Loaders/PacMan.tsx",[],"/home/aely/flureerecoil/src/Pages/ManageTerpenes.tsx",[],"/home/aely/flureerecoil/src/Components/Terpenes.tsx",[],"/home/aely/flureerecoil/src/Components/TerpeneEdit.tsx",["561","562"],"import { ChangeEventHandler, MouseEventHandler, useEffect, useState } from 'react'\nimport { terpene, MySyntheticEvent, ImageObject } from '../types/types.ts'\nimport { updateTerpene } from '../queries/updateTerpene'\nimport { Form, FormGroup, Label, Input, Button } from 'reactstrap'\nimport { Editor } from 'react-draft-wysiwyg';\nimport { EditorState, convertToRaw, ContentState } from 'draft-js';\nimport htmlToDraft from 'html-to-draftjs';\nimport draftToHtml from 'draftjs-to-html';\n\ninterface PropTypes {\n    terpene: terpene,\n    handleEdit: Function\n}\n\nconst TerpeneEdit: Function = (props: PropTypes) => {\n\n    let initializeState: EditorState = EditorState.createWithContent(ContentState.createFromBlockArray(htmlToDraft(props.terpene['terpene/scentDesc']).contentBlocks))\n    let initializeState1: EditorState = EditorState.createWithContent(ContentState.createFromBlockArray(htmlToDraft(props.terpene['terpene/effectDesc']).contentBlocks))\n    const [editorState, setEditorState] = useState<EditorState | null>(initializeState)\n    const [editorState1, setEditorState1] = useState<EditorState | null>(initializeState1)\n    const [name, setName] = useState<string>('')\n    const [scentDesc, setScentDesc] = useState<string>('')\n    const [effectDesc, setEffectDesc] = useState<string>('')\n    const [loading, setLoading] = useState<boolean>(true)\n\n    const onEditorStateChange = (editorState: EditorState) => {\n        setEditorState(editorState)\n        setScentDesc(draftToHtml(convertToRaw(editorState.getCurrentContent())).replace(/[\\n]/g, ''))\n    }\n\n    const onEditorStateChange1 = (editorState1: EditorState) => {\n        setEditorState1(editorState1)\n        setEffectDesc(draftToHtml(convertToRaw(editorState1.getCurrentContent())).replace(/[\\n]/g, ''))\n    }\n\n    useEffect(() => {\n        if (loading) {\n            setName(props.terpene['terpene/name'])\n            setScentDesc(props.terpene['terpene/scentDesc'])\n            setEffectDesc(props.terpene['terpene/effectDesc'])\n            setLoading(false)\n        }\n        console.log(name, scentDesc, effectDesc, loading)\n    }, [loading, setLoading])\n\n    const handleChange: ChangeEventHandler = ({target: {id, value}}: MySyntheticEvent) => {\n        switch(id) {\n            case 'name': {\n                setName(value)\n                break;\n            }\n            default: {\n                break;\n            }\n        }\n    }\n\n    const saveTerpene: Function = async (_id: number, _name: string, _scentDesc: string, _effectDesc: string) => {\n        await updateTerpene(_id, _name, _scentDesc, _effectDesc)\n        props.handleEdit()\n    }\n\n    const _uploadImageCallback: Function = (file: any) => {\n        // long story short, every time we upload an image, we\n        // need to save it to the state so we can get it's data\n        // later when we decide what to do with it.\n    \n       // Make sure you have a uploadImages: [] as your default state\n        const [uploadedImages, setUploadedImages] = useState<ImageObject[]>([])\n        console.log(uploadedImages);\n        const imageObject = {\n          file: file,\n          localSrc: URL.createObjectURL(file),\n        }\n    \n        uploadedImages.push(imageObject);\n    \n        setUploadedImages(uploadedImages)\n    \n        // We need to return a promise with the image src\n        // the img src we will use here will be what's needed\n        // to preview it in the browser. This will be different than what\n        // we will see in the index.md file we generate.\n        return new Promise(\n          (resolve, reject) => {\n            resolve({ data: { link: imageObject.localSrc } });\n          }\n        );\n    }\n\n    return(\n        <div style={{textAlign: 'center', maxWidth: '75%', margin: 'auto', marginTop: '5%'}}>\n            <h1>Update Cannabinoid</h1>\n            <br/>\n            <Form>\n            <FormGroup>\n                <Label for='name'>Terpene Name</Label>\n                <Input type='text' id='name' value={name} onChange={handleChange} /> \n            </FormGroup>\n            <FormGroup>\n                <Label for='name'>Terpene Scent Description</Label>\n                <Editor\n                    editorStyle={{borderStyle: 'solid', borderWidth: '2px', borderColor: '#aaa', backgroundColor: '#eee'}}\n                    editorState={editorState}\n                    onEditorStateChange={onEditorStateChange}\n                    toolbar={{\n                        image: { uploadCallback: _uploadImageCallback },\n                        inputAccept: 'image/gif,image/jpeg,image/jpg,image/png,image/svg,application/pdf,text/plain,application/vnd.openxmlformatsofficedocument.wordprocessingml.document,application/msword,application/vnd.ms-excel'\n                        }}\n                />\n            </FormGroup>\n            <FormGroup>\n                <Label for='name'>Terpene Effect Description</Label>\n                <Editor\n                    editorStyle={{borderStyle: 'solid', borderWidth: '2px', borderColor: '#aaa', backgroundColor: '#eee'}}\n                    editorState={editorState1}\n                    onEditorStateChange={onEditorStateChange1}\n                    toolbar={{\n                        image: { uploadCallback: _uploadImageCallback },\n                        inputAccept: 'image/gif,image/jpeg,image/jpg,image/png,image/svg,application/pdf,text/plain,application/vnd.openxmlformatsofficedocument.wordprocessingml.document,application/msword,application/vnd.ms-excel'\n                        }}\n                />\n            </FormGroup>\n            <Button color='success' onClick={() => saveTerpene(props.terpene['_id'], name, scentDesc, effectDesc)}>Save</Button>\n        </Form>\n        </div>\n    )\n}\n\nexport default TerpeneEdit","/home/aely/flureerecoil/src/queries/updateTerpene.js",[],"/home/aely/flureerecoil/src/Pages/ManageCannabinoids.tsx",[],"/home/aely/flureerecoil/src/Components/CannabinoidEdit.tsx",["563"],"import { ChangeEventHandler, useEffect, useState } from 'react'\nimport { cannabinoid, MySyntheticEvent, ImageObject } from '../types/types.ts'\nimport { updateCannabinoid } from '../queries/updateCannabinoid'\nimport { Form, FormGroup, Label, Input, Button } from 'reactstrap'\nimport { Editor } from 'react-draft-wysiwyg';\nimport { EditorState, convertToRaw, ContentState } from 'draft-js';\nimport htmlToDraft from 'html-to-draftjs';\nimport draftToHtml from 'draftjs-to-html';\n\ninterface PropTypes {\n    cannabinoid: cannabinoid,\n    handleEdit: Function\n}\n\nconst CannabinoidEdit: Function = (props: PropTypes) => {\n\n    let initializeState: EditorState = EditorState.createWithContent(ContentState.createFromBlockArray(htmlToDraft(props.cannabinoid['cannabinoid/effectDesc']).contentBlocks))\n    const [editorState, setEditorState] = useState<EditorState | null>(initializeState)\n    const [name, setName] = useState<string>('')\n    const [effectDesc, setEffectDesc] = useState<string>('')\n    const [loading, setLoading] = useState<boolean>(true)\n\n    const onEditorStateChange = (editorState: EditorState) => {\n        setEditorState(editorState)\n        setEffectDesc(draftToHtml(convertToRaw(editorState.getCurrentContent())).replace(/[\\n]/g, ''))\n    }\n\n    useEffect(() => {\n        if (loading) {\n            setName(props.cannabinoid['cannabinoid/name'])\n            setEffectDesc(props.cannabinoid['cannabinoid/effectDesc'])\n            setLoading(false)\n        }\n        console.log(name, effectDesc, loading)\n    }, [loading, setLoading])\n\n    const _uploadImageCallback = (file: any) => {\n        // long story short, every time we upload an image, we\n        // need to save it to the state so we can get it's data\n        // later when we decide what to do with it.\n    \n       // Make sure you have a uploadImages: [] as your default state\n        const [uploadedImages, setUploadedImages] = useState<ImageObject[]>([])\n        console.log(uploadedImages);\n        const imageObject = {\n          file: file,\n          localSrc: URL.createObjectURL(file),\n        }\n\n        uploadedImages.push(imageObject);\n    \n        setUploadedImages(uploadedImages)\n    \n        // We need to return a promise with the image src\n        // the img src we will use here will be what's needed\n        // to preview it in the browser. This will be different than what\n        // we will see in the index.md file we generate.\n        return new Promise(\n          (resolve, reject) => {\n            resolve({ data: { link: imageObject.localSrc } });\n          }\n        );\n    }\n\n    const handleChange: ChangeEventHandler = ({target: {id, value}}: MySyntheticEvent) => {\n        switch(id) {\n            case 'name': {\n                setName(value)\n                break;\n            }\n            default: {\n                break;\n            }\n        }\n    }\n\n    const saveCannabinoid: Function = async (_id: number, _name: string, _effectDesc: string) => {\n        await updateCannabinoid(_id, _name, _effectDesc)\n        props.handleEdit()\n    }\n\n    return(\n        <div style={{textAlign: 'center', maxWidth: '75%', margin: 'auto', marginTop: '5%'}}>\n            <h1>Update Cannabinoid</h1>\n            <br/>\n            <Form>\n            <FormGroup>\n                <Label for='name'>Cannabinoid Name</Label>\n                <Input type='text' id='name' value={name} onChange={handleChange} /> \n            </FormGroup>\n            <FormGroup>\n                <Label for='name'>Cannabinoid Effect Description</Label>\n                <Editor\n                    editorStyle={{borderStyle: 'solid', borderWidth: '2px', borderColor: '#aaa', backgroundColor: '#eee'}}\n                    editorState={editorState}\n                    onEditorStateChange={onEditorStateChange}\n                    toolbar={{\n                        image: { uploadCallback: _uploadImageCallback },\n                        inputAccept: 'image/gif,image/jpeg,image/jpg,image/png,image/svg,application/pdf,text/plain,application/vnd.openxmlformatsofficedocument.wordprocessingml.document,application/msword,application/vnd.ms-excel'\n                        }}\n                />\n            </FormGroup>\n            <Button color='success' onClick={() => saveCannabinoid(props.cannabinoid['_id'], name, effectDesc)}>Save</Button>\n        </Form>\n        </div>\n    )\n}\n\nexport default CannabinoidEdit","/home/aely/flureerecoil/src/Components/Cannabinoids.tsx",[],"/home/aely/flureerecoil/src/queries/updateCannabinoid.js",[],"/home/aely/flureerecoil/src/queries/getMyPurchases.js",[],"/home/aely/flureerecoil/src/Pages/ManageCustomers.tsx",["564"],"import { FunctionComponent, useState } from 'react'\nimport NewCustomer from '../Components/NewCustomer.tsx'\n\nconst ManageCustomers: FunctionComponent = (props: any) => {\n    console.log('hello')\n    return(\n        <div style={{textAlign: 'center', maxWidth: '75%', margin: 'auto', marginTop: '5%'}}>\n            <NewCustomer {...props} />\n        </div>\n    )\n}\n\nexport default ManageCustomers","/home/aely/flureerecoil/src/Components/NewCustomer.tsx",[],"/home/aely/flureerecoil/src/queries/newCustomer.js",[],"/home/aely/flureerecoil/src/Components/Dashboard.tsx",[],"/home/aely/flureerecoil/src/queries/userLogin.js",[],"/home/aely/flureerecoil/src/Components/AddTerpene.tsx",[],"/home/aely/flureerecoil/src/Components/AddCannabinoid.tsx",[],"/home/aely/flureerecoil/src/queries/fetchCategories.js",[],"/home/aely/flureerecoil/src/Pages/ManageProducts.tsx",["565","566"],"import { FunctionComponent, useEffect, useState } from 'react'\nimport { useRecoilValue, useSetRecoilState, useRecoilState } from 'recoil'\nimport { tabId as t, \n         selectedTerps,\n         selectedCanns,\n         terpConcentrations,\n         cannConcentrations,\n         category,\n         productCost,\n         productInventory,\n         productName } from '../Recoil/productForm.tsx'\nimport { getCategories, handle as h, forceUpdate } from '../Recoil/fluree.tsx'\nimport { Button } from 'reactstrap'\nimport { Category } from 'src/types/types.ts'\nimport Products from '../Components/Products.tsx'\nimport ProductDetails from '../Components/ProductDetails.tsx'\nimport EditProduct from '../Components/EditProduct.tsx'\n\nconst ManageProducts: FunctionComponent = (props: any) => {\n    \n    const allCategories: Category[] = useRecoilValue(getCategories)\n    const setSelTerps: Function = useSetRecoilState(selectedTerps)\n    const setSelCanns: Function = useSetRecoilState(selectedCanns)\n    const setCannConc: Function = useSetRecoilState(cannConcentrations)\n    const setTerpConc: Function = useSetRecoilState(terpConcentrations)\n    const setName: Function = useSetRecoilState(productName)\n    const setCost: Function = useSetRecoilState(productCost)\n    const setInventory: Function = useSetRecoilState(productInventory)\n    const setCategory: Function = useSetRecoilState(category)\n    const [handle, setHandle] = useRecoilState<string>(h)\n    const [tabId, setTabId] = useRecoilState<number>(t)\n    const [currentView, setCurrentView] = useState<string>('allProducts')\n    const update: Function = useSetRecoilState(forceUpdate)\n    const [loading, setLoading] = useState<boolean>(true)\n    const clearProfile: Function = () => {\n        setSelTerps([])\n        setSelCanns([])\n        setCannConc([])\n        setTerpConc([])\n    }\n\n    const clearProductInfo: Function = () => {\n        setName('')\n        setCost(0)\n        setInventory(0)\n        setCategory(allCategories[0])\n        setHandle('')\n        update(Math.random())\n    }\n\n    useEffect(() => {\n        if(loading) {\n            clearProductInfo()\n            clearProfile()\n            setHandle('')\n            //update(Math.random())\n            setLoading(false)\n        }\n    }, [loading, setLoading])\n\n    const changeView: Function = (view: string) => {\n        switch(view) {\n            case 'newProduct' : {\n                setHandle('')\n                update(Math.random())\n                clearProductInfo()\n                clearProfile()\n                setCurrentView(view)\n                setTabId(1)\n                break;\n            }\n            case 'allProducts': {\n                setHandle('')\n                update(Math.random())\n                clearProductInfo()\n                clearProfile()\n                setTabId(1)\n                setCurrentView(view)\n                break;\n            }\n            case 'editProduct': {\n                setCurrentView(view)\n                break\n            }\n            default: break;\n        }\n    }\n\n    return (\n        <div className='App'>\n            {currentView === 'newProduct' && <EditProduct currentView={currentView} clearProductInfo={clearProductInfo} clearProfile={clearProfile} changeView={changeView} />}\n            {currentView === 'newProduct' && <Button color='info' onClick={() => changeView('allProducts')}>View all Products</Button>}\n            {currentView === 'allProducts' && <Button color='info' style={{margin: 'auto', marginTop: '3%'}} onClick={() => changeView('newProduct')}>Add New Product</Button>}\n            {currentView === 'allProducts' && <Products setCurrentView={setCurrentView} setHandle={setHandle} />}\n            {currentView === 'product' && <ProductDetails currentView={currentView} setCurrentView={setCurrentView} handle={handle} setHandle={setHandle} />}\n            {currentView === 'product' && <Button color='info' onClick={() => changeView('newProduct')}>Add New Product</Button>}\n            {currentView === 'editProduct' && <EditProduct currentView={currentView} clearProductInfo={clearProductInfo} clearProfile={clearProfile} />}\n            {currentView === 'editProduct' && <Button color='info' onClick={() => changeView('allProducts')}>View all Products</Button>}\n        </div>\n    )\n}\n\nexport default ManageProducts","/home/aely/flureerecoil/src/Components/NewProduct.tsx",["567"],"import { Category } from '../types/types.ts'\nimport { Button, Form, FormGroup, Input, Label } from 'reactstrap'\nimport { useRef, ChangeEventHandler, MouseEventHandler, useEffect, useState, MutableRefObject } from 'react'\nimport { useRecoilState, useRecoilValue, useSetRecoilState } from 'recoil'\nimport { MySyntheticEvent, Product } from '../types'\nimport { productName,\n         productCost,\n         productInventory,\n         category as cat,\n         tabId as tab,\n         buffer as b,\n         getCategories,\n         getProduct,\n         forceUpdate,\n         handle as h } from 'src/Recoil'\n\ninterface PropTypes {\n    currentView: string\n}\n\nconst NewProduct: Function = (props: PropTypes) => {\n\n    const update: Function = useSetRecoilState(forceUpdate)\n\n    const textRef = useRef<MutableRefObject<any>>(null)\n\n    const categories = useRecoilValue<Array<Category>>(getCategories)\n    const [name, setName] = useRecoilState<string>(productName)\n    const [cost, setCost] = useRecoilState<number>(productCost)\n    const [tabId, setTabId] = useRecoilState<number>(tab)\n    const [inventory, setInventory] = useRecoilState<number>(productInventory)\n    const [category, setCategory] = useRecoilState<Category>(cat)\n    const [buffer, setBuffer] = useRecoilState<Array<number>>(b)\n    const handle: string = useRecoilValue(h)\n    const activeProduct: Product = useRecoilValue(getProduct(handle))\n    const [showItem, setShowItem] = useState<boolean>(true)\n    const [loading, setLoading] = useState<boolean>(true)\n\n    useEffect(() => {\n            if(loading) {        \n            setCategory(categories[0])\n            if(activeProduct.length > 0) {\n                setName(activeProduct[0]['product/name'])\n                setCost(activeProduct[0]['product/cost'])\n                setInventory(activeProduct[0]['product/inventory'])\n                setCategory(activeProduct[0]['product/category'])\n                if(activeProduct[0]['product/imageHash']){\n                    if(activeProduct[0]['product/imageHash'].length > 0) {\n                        setShowItem(false)\n                    }\n                }\n            }\n            setLoading(false)\n            setTimeout(() => {textRef.current.focus()}, 300)\n        }    \n    }, [props, setCategory, categories, activeProduct, setName, setCost, setInventory, update, loading, setLoading, handle])\n\n    const handleChange: ChangeEventHandler = ({target: {id, value, files}}: MySyntheticEvent) => {\n        switch(id) {\n            case 'name': {\n                setName(value)\n                break;\n            }\n            case 'cost': {\n                setCost((parseInt(value)))\n                console.log(cost)\n                break;\n            }\n            case 'inventory': {\n                setInventory((parseInt(value)))\n                console.log(inventory)\n                break;\n            }\n            case 'category': {\n                const ctg: Category = categories.filter(prop => {\n                    return prop['category/name'].includes(value)\n                })\n                setCategory(ctg[0])\n                break;\n            }\n            case 'image': {\n                const reader = new window.FileReader()\n                reader.readAsArrayBuffer(files[0])\n                reader.onloadend = () => {\n                    setBuffer([])\n                    setBuffer(Buffer(reader.result))\n                }\n                break;\n            }\n            default: break;\n        }\n    }\n\n    const incrementTab: MouseEventHandler = () => {\n        setTabId(tabId + 1)\n    }\n\n    const renderImage: Function = () => {\n        return(\n            <FormGroup>\n                <Label for='name'>Image</Label>\n                <Input type='file' id='image' onChange={handleChange} />\n            </FormGroup>\n        )\n    }\n\n    const renderForm: Function = () => {\n        return(\n            <Form>\n                <FormGroup>\n                    <Label for='name'>Product Name</Label>\n                    <Input type='text' id='name' value={name} onChange={handleChange} innerRef={textRef} />\n                </FormGroup>\n                <FormGroup>\n                    <Label for='name'>Cost</Label>\n                    <Input type='number' id='cost' value={cost} onChange={handleChange} />\n                </FormGroup>\n                <FormGroup>\n                    <Label for='name'>Inventory</Label>\n                    <Input type='number' id='inventory' value={inventory} onChange={handleChange} />\n                </FormGroup>\n                <FormGroup>\n                    <Label for='name'>Category Name</Label>\n                    <Input type='select' id='category' onChange={handleChange} value={category['category/name']}>\n                    {categories.map(cat => {\n                        return(\n                            <option key={cat['_id']}>{cat['category/name']}</option>\n                        )\n                    })}\n                    </Input>\n                </FormGroup>\n                {showItem && renderImage()}\n                {!showItem && <Button color='info' onClick={() => setShowItem(!showItem)}>Change Image</Button>}\n            </Form>\n        )\n    }\n\n    return(\n        <div style={{maxWidth: '75%', margin: 'auto'}}>\n            {props.currentView === 'newProduct' && <h3 style={{textAlign: 'center'}} >Add a New Product</h3>}\n            {props.currentView === 'editProduct' && <h3 style={{textAlign: 'center'}} >Edit Product</h3>}\n            <br/>\n            {renderForm()}\n            <Button color='success' onClick={incrementTab}>Next</Button>\n        </div>\n    )\n}\n\nexport default NewProduct","/home/aely/flureerecoil/src/Components/NewProductProfile.tsx",[],"/home/aely/flureerecoil/src/Components/Review.tsx",["568","569"],"import { MouseEventHandler } from 'react'\nimport { Table, Button } from 'reactstrap'\nimport { useRecoilValue, useRecoilState, useSetRecoilState } from 'recoil'\nimport { category as cat, productCost, productInventory, productName, selectedCanns,\n         tabId as tab, selectedTerps, cannConcentrations, forceUpdate,\n         terpConcentrations, buffer as b, getProduct, handle as h } from 'src/Recoil'\nimport { Cannabinoid, Category, Terpene, Product } from 'src/types'\nimport CannabinoidProfile from './CannabinoidProfile.tsx'\nimport TerpeneProfile from './TerpeneProfile.tsx'\nimport ipfs from '../utils/ipfs'\nimport { updateProduct, updateTerpene, updateCannabinoid, addProduct } from '../queries'\n\ninterface PropTypes {\n    clearProfile: Function,\n    clearProductInfo: Function,\n    setCurrentView: Function\n}\n\n\nconst Review: Function = (props: PropTypes) => {\n    console.log(props)\n\n    const name = useRecoilValue<string>(productName)\n    const cost = useRecoilValue<string>(productCost)\n    const inventory = useRecoilValue<string>(productInventory)\n    const category = useRecoilValue<Category>(cat)\n    const selCanns = useRecoilValue<Array<Cannabinoid>>(selectedCanns)\n    const selTerps = useRecoilValue<Array<Terpene>>(selectedTerps)\n    const terpCon = useRecoilValue<Array<number>>(terpConcentrations)\n    const cannCon = useRecoilValue<Array<number>>(cannConcentrations)\n    const buffer = useRecoilValue<Array<number>>(b)\n    const [tabId, setTabId] = useRecoilState<number>(tab)\n    const update: Function = useSetRecoilState(forceUpdate)\n    const handle: string = useRecoilValue(h)\n    const activeProduct = useRecoilValue<Array<Product>>(getProduct(handle))\n\n    const saveProduct: Function = async () => {\n        \n        const t = await getTerps()\n        const c = await getCanns()\n        const tc = await getTerpConcs()\n        const cc = await getCannConcs()\n        if(buffer.length > 0) {\n            const imageHash = await ipfs.add(buffer)\n            console.log(imageHash)\n            await addProduct(name, category._id, cost, inventory, imageHash.path, c, cc, t, tc)\n        } else {\n            await addProduct(name, category._id, cost, inventory, '', c, cc, t, tc)\n        }\n        update(Math.random())\n        props.clearProductInfo()\n        props.clearProfile()\n        setTabId(1)\n        window.location.replace('/editProduct')\n    }\n\n    const updProduct: Function = async () => {\n        try {\n            const t = await getTerps()\n            const c = await getCanns()\n            const tc = await getTerpConcs()\n            const cc = await getCannConcs()\n            console.log(tc)\n            if(buffer.length > 0) {\n                const imageHash = await ipfs.add(buffer)\n                await updateProduct(activeProduct[0]['_id'], name, category._id, cost, inventory, imageHash.path, activeProduct[0]['product/productProfileId']._id, c, cc, t, tc)\n            } else {\n                await updateProduct(activeProduct[0]['_id'], name, category._id, cost, inventory, activeProduct[0]['product/imageHash'], activeProduct[0]['product/productProfileId']._id, c, cc, t, tc)\n            }\n            update(Math.random())\n            props.clearProductInfo()\n            props.clearProfile()\n            setTabId(1)\n            props.setCurrentView('allProducts')\n        } catch(error) {\n            console.log(error)\n        }\n    }\n\n    const getTerps: Function = async () => {\n        try {\n            let t: number[] = []\n            for(let i: number = 0; i < selTerps.length; i++) {\n                if(t.length === 0) {\n                    t = [parseInt(selTerps[i]._id)]\n                } else {\n                    t = [...t, parseInt(selTerps[i]._id)]\n                }\n            }\n            return t\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    const getTerpConcs: Function = async () => {\n        try {\n            let tc: any = []\n            for(let i: number = 0; i < selTerps.length; i++) {\n                if(tc.length === 0) {\n                    tc = [JSON.parse(terpCon[i])]\n                } else {\n                    tc = [...tc, JSON.parse(terpCon[i])]\n                }\n            }\n            return tc\n        } catch (error) {\n            console.log(error)\n        }\n    }\n    \n    const getCannConcs: Function = async () => {\n        try {\n            let cc: any = []\n            for(let i: number = 0; i < selCanns.length; i++) {\n                if(cc.length === 0) {\n                    cc = [JSON.parse(cannCon[i])]\n                } else {\n                    cc = [...cc, JSON.parse(cannCon[i])]\n                }\n            }\n            return cc\n        } catch(error) {\n            console.log(error)\n        }\n    }\n\n    const getCanns: Function = async () => {\n        try {\n            let c: number[] = []\n            let cc: number[] = []\n            for(let i: number = 0; i < selCanns.length; i++) {\n                if(c.length === 0) {\n                    c = [parseInt(selCanns[i]._id)]\n                    cc = [JSON.parse(cannCon[i])]\n                } else {\n                    c = [...c, parseInt(selCanns[i]._id)]\n                    cc = [...cc, JSON.parse(cannCon[i])]\n                }\n            }\n            return c\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    const decrementTab: MouseEventHandler = () => {\n        setTabId(tabId - 1)\n    }\n\n    const renderProductInfoReview: Function = () => {\n        return(\n            <Table responsive striped style={{margin: 'auto'}}>\n                <thead>\n                    <tr>\n                        <th>\n                            Product Name\n                        </th>\n                        <th>\n                            Product Cost\n                        </th>\n                        <th>\n                            Product Inventory\n                        </th>\n                        <th>\n                            Category\n                        </th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td>\n                            {name}\n                        </td>\n                        <td>\n                            {cost}\n                        </td>\n                        <td>\n                            {inventory}\n                        </td>\n                        <td>\n                            {category['category/name']}\n                        </td>\n                    </tr>\n                    <tr/>\n                </tbody>\n            </Table>\n        )\n    }\n\n    return(\n        <div style={{maxWidth: '80%', margin: 'auto', marginTop: '3%'}} >\n            <h3 style={{textAlign: 'center'}}>Product Info:</h3>\n            <br/>\n            {renderProductInfoReview()}\n            <br/>\n            {buffer.length > 0 && <h3 style={{textAlign: 'center'}}>Image is successfully attached</h3>}\n            <br/>\n            <h3 style={{textAlign: 'center'}}>Cannabinoid Profile</h3>\n            <br/>\n            <CannabinoidProfile />\n            <br/>\n            <h3 style={{textAlign: 'center'}}>Terpene Profile</h3>\n            <br/>\n            <TerpeneProfile />\n            <br/>\n            <Button color='danger' onClick={decrementTab}>Back</Button>\n            {activeProduct.length === 0 && <Button color='success' onClick={saveProduct}>Save Product</Button>}\n            {activeProduct.length === 1 && <Button color='success' onClick={updProduct}>Update Product</Button>}\n        </div>\n    )\n}\n\nexport default Review","/home/aely/flureerecoil/src/Components/TerpeneProfile.tsx",["570"],"import { FunctionComponent, useEffect } from 'react'\nimport { Terpene, Product } from '../types/types.ts'\nimport { Button, Table } from 'reactstrap'\nimport { getProduct, handle as h } from '../Recoil/fluree.tsx'\nimport { useRecoilState, useRecoilValue } from 'recoil'\nimport { terpConcentrations, selectedTerps } from 'src/Recoil/productForm.tsx'\n\nconst TerpeneProfile: FunctionComponent = (props: any) => {\n\n    const handle: string = useRecoilValue(h)\n    const activeProduct: Product = useRecoilValue(getProduct(handle))\n    \n    const [selectedTerpenes, setSelectedTerpenes] = useRecoilState<Array<Terpene>>(selectedTerps)\n    const [concentrations, setConcentrations] = useRecoilState<Array<JSON>>(terpConcentrations)\n\n    useEffect(() => {\n        if(activeProduct.length > 0 && selectedTerpenes.length < 1) {\n            deriveTerps()\n        }\n    }, [activeProduct])\n\n    const deriveTerps: Function =  () => {\n        setSelectedTerpenes([])\n        setConcentrations([])\n        const terpenes: Terpene[] = activeProduct[0]['product/productProfileId']['productprofile/terpeneIds']\n        const concs: JSON[] = activeProduct[0]['product/productProfileId']['productprofile/terpConc']\n        for(let i: number = 0; i < terpenes.length; i++) {\n            selectedTerpenes.push(terpenes[i])\n            setSelectedTerpenes(selectedTerpenes)\n            concentrations.push(concs[i])\n            setConcentrations(concentrations)\n            console.log(concentrations)\n        }\n    }\n    \n    const remove: Function = (idx: number) => {\n        selectedTerpenes.splice(idx, 1)\n        concentrations.splice(idx, 1)\n        console.log(selectedTerpenes.length, concentrations.length)\n        if (selectedTerpenes.length < 1 && concentrations.length < 1) {\n            setSelectedTerpenes([])\n            setConcentrations([])\n            return\n        } \n        if (selectedTerpenes.length >= 1 && concentrations.length >= 1) {\n            setSelectedTerpenes([])\n            setConcentrations([])\n            setSelectedTerpenes(selectedTerpenes)\n            setConcentrations(concentrations)\n        }\n    }\n\n    const renderContent: Function = () => {\n        return(\n            <Table striped responsive style ={{margin: 'auto', maxWidth: '80%'}} >\n                <thead>\n                    <tr>\n                        <th>\n                            #\n                        </th>\n                        <th>\n                            Terpene Name\n                        </th>\n                        <th>\n                            Terpene Concentration\n                        </th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {selectedTerpenes.map((terp: Terpene, index: number) => {\n                        const con: JSON = JSON.parse(concentrations[index])\n                        return(\n                            <tr key={index}>\n                                <td>\n                                    {index + 1}\n                                </td>\n                                <td>\n                                    {terp['terpene/name']}\n                                </td>\n                                <td>\n                                    {con[`${terp['_id']}`]}%\n                                </td>\n                                <Button color='danger' onClick={() => remove(index)}>Remove</Button>\n                            </tr>\n                        )\n                    })}\n                </tbody>\n            </Table>\n        )\n    }\n\n    const renderEmpty: Function = () => {\n        return <h5 style={{textAlign: 'center'}}>No Terpenes Selected</h5>\n    }\n\n    return(\n        <>\n            {selectedTerpenes.length > 0 && renderContent()}\n            {selectedTerpenes.length === 0 &&  renderEmpty()}\n        </>\n    )\n}\n\nexport default TerpeneProfile","/home/aely/flureerecoil/src/Components/CannabinoidProfile.tsx",["571"],"import { FunctionComponent, useEffect } from 'react'\nimport { Cannabinoid, Product } from '../types/types.ts'\nimport { Button, Table } from 'reactstrap'\nimport { useRecoilState, useRecoilValue } from 'recoil'\nimport { getProduct, handle as h } from '../Recoil/fluree.tsx'\nimport { cannConcentrations, selectedCanns } from 'src/Recoil/productForm'\n\nconst CannabinoidProfile: FunctionComponent = (props: any) => {\n\n    const handle: string = useRecoilValue(h)\n    const activeProduct: Product = useRecoilValue(getProduct(handle))\n    \n    const [selectedCannabinoids, setSelectedCannabinoids] = useRecoilState<Array<Cannabinoid>>(selectedCanns)\n    const [concentrations, setConcentrations] = useRecoilState<Array<number>>(cannConcentrations)\n    useEffect(() => {\n        if(activeProduct.length > 0 && selectedCannabinoids.length < 1) {\n            deriveCanns()\n        }\n    }, [activeProduct])\n\n    const deriveCanns: Function =  () => {\n        setSelectedCannabinoids([])\n        setConcentrations([])\n        const cannabinoids: Cannabinoid[] = activeProduct[0]['product/productProfileId']['productprofile/cannabinoidIds']\n        const concs: Cannabinoid[] = activeProduct[0]['product/productProfileId']['productprofile/cannConc']\n        for(let i: number = 0; i < cannabinoids.length; i++) {\n            selectedCannabinoids.push(cannabinoids[i])\n            setSelectedCannabinoids(selectedCannabinoids)\n            concentrations.push(concs[i])\n            setConcentrations(concentrations)\n        }\n        console.log(selectedCannabinoids, concentrations)\n    }\n    \n    const remove: Function = (idx: number) => {\n        selectedCannabinoids.splice(idx, 1)\n        concentrations.splice(idx, 1)\n        if (selectedCannabinoids.length < 1 && concentrations.length < 1) {\n            setSelectedCannabinoids([])\n            setConcentrations([])\n            return\n        } \n        if(selectedCannabinoids.length >=1 && concentrations.length >= 1) {\n            setSelectedCannabinoids([])\n            setConcentrations([])\n            setSelectedCannabinoids(selectedCannabinoids)\n            setConcentrations(concentrations)\n            return\n        }\n    }\n\n    const renderContent: Function = () => {\n        return(\n            <Table striped responsive style ={{margin: 'auto', maxWidth: '80%'}} >\n                <thead>\n                    <tr>\n                        <th>\n                            #\n                        </th>\n                        <th>\n                            Cannabinoid Name\n                        </th>\n                        <th>\n                            Cannabinoid Concentration\n                        </th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {selectedCannabinoids.map((cann: Cannabinoid, index: number) => {\n                        const con: JSON = JSON.parse(concentrations[index])\n                        return(\n                            <tr key={index}>\n                                <td>\n                                    {index + 1}\n                                </td>\n                                <td>\n                                    {cann['cannabinoid/name']} \n                                </td>\n                                <td>\n                                    {con[`${cann['_id']}`]}%\n                                </td>\n                                <Button color='danger' onClick={() => remove(index)}>Remove</Button>\n                            </tr>\n                        )\n                    })}\n                </tbody>\n            </Table>\n        )\n    }\n\n    const renderEmpty: Function = () => {\n        return <h5 style={{textAlign: 'center'}}>No Cannabinoids Selected</h5>\n    }\n\n    return(\n        <>\n            {selectedCannabinoids.length > 0 && renderContent()}\n            {selectedCannabinoids.length === 0 &&  renderEmpty()}\n        </>\n    )\n}\n\nexport default CannabinoidProfile","/home/aely/flureerecoil/src/Recoil/productForm.tsx",["572","573"],"import { atom, selector } from 'recoil'\nimport { Category, initCategory, Terpene, initTerpene, Cannabinoid, initCannabinoid } from '../types/types.ts'\nimport { getCategories } from './fluree'\n\nexport const activeProduct = atom<any>({\n    key: 'activeProduct',\n    default: []\n})\n\n\nexport const productName = atom<string>({\n    key: 'productName',\n    default: '',\n    persistence_UNSTABLE: {\n        type: 'productName'\n    }\n})\n\nexport const buffer = atom<Array<number>>({\n    key: 'buffer',\n    default: [],\n    persistence_UNSTABLE: {\n        type: 'buffer'\n    }\n})\n\nexport const uploadedImages = atom<Array<any>>({\n    key: 'uploadedImages',\n    default: [],\n    persistence_UNSTABLE: {\n        type: 'uploadedImages'\n    }\n})\n\nexport const productInventory = atom<number>({\n    key: 'productInventory',\n    default: 0,\n    persistence_UNSTABLE: {\n        type: 'productName'\n    }\n})\n\nexport const productCost = atom<number>({\n    key: 'productCost',\n    default: 0,\n    persistence_UNSTABLE: {\n        type: 'productCost'\n    }\n})\n\nexport const category = atom<Category>({\n    key: 'category',\n    default: initCategory(),\n    persistence_UNSTABLE: {\n        type: 'category'\n    },\n    dangerouslyAllowMutability: true\n})\n\nexport const selectedTerps = atom<Array<Terpene>>({\n    key: 'selectedTerps',\n    default: [initTerpene()],\n    persistence_UNSTABLE: {\n        type: 'selectedTerps'\n    },\n    dangerouslyAllowMutability: true\n})\n\nexport const selectedCanns = atom<Array<Cannabinoid>>({\n    key: 'selectedCanns',\n    default: [initCannabinoid()],\n    persistence_UNSTABLE: {\n        type: 'selectedCanns'\n    },\n    dangerouslyAllowMutability: true\n})\n\nexport const terpConcentrations = atom<Array<number>>({\n    key: 'terpConcentrations',\n    default: [],\n    persistence_UNSTABLE: {\n        type: 'terpConcentrations'\n    },\n    dangerouslyAllowMutability: true\n})\n\nexport const cannConcentrations = atom<Array<number>>({\n    key: 'cannConcentrations',\n    default: [],\n    persistence_UNSTABLE: {\n        type: 'cannConcentrations'\n    },\n    dangerouslyAllowMutability: true\n})\n\nexport const tabId = atom<number>({\n    key: 'tabId',\n    default: 1\n})\n\n\n","/home/aely/flureerecoil/src/Components/TerpeneForm.tsx",["574"],"import { ChangeEventHandler, FunctionComponent, useEffect, useState, MouseEventHandler } from 'react'\nimport { useRecoilState, useRecoilValue } from 'recoil'\nimport { Button, Form, FormGroup, Label, Input } from 'reactstrap'\nimport { terpConcentrations, selectedTerps } from '../Recoil/productForm.tsx'\nimport { Terpene, MySyntheticEvent, Product } from '../types/types.ts'\nimport { getTerpenes } from 'src/Recoil/fluree.tsx'\n\nconst TerpeneForm: FunctionComponent = (props:any) => {\n    const allTerpenes: Terpene[] = useRecoilValue(getTerpenes)\n    const [concentration, setConcentration] = useState<number>()\n    const [terpene, setTerpene] = useState<Terpene>({})\n    const [terpConc, setTerpConc] = useRecoilState<Array<JSON>>(terpConcentrations)\n    const [selectedTerpenes, setSelectedTerpenes] = useRecoilState<Array<Terpene>>(selectedTerps)\n    const [loading, setLoading] = useState<boolean>(true)\n    const handleChange: ChangeEventHandler = ({target: {id, value}}: MySyntheticEvent) => {\n        switch(id) {\n            case 'conc': {\n                setConcentration(value)\n                break;\n            }\n            case 'terpenes': {\n                let terpene: Terpene = allTerpenes.filter(prop => {\n                    return prop['terpene/name'].includes(value)\n                })\n                setTerpene(terpene[0])\n                break;\n            }\n            default: break;\n        }\n    }\n\n    useEffect(() => {\n        if(loading) {\n            setTerpene(allTerpenes[0])\n\n            setLoading(false)\n        }\n    }, [loading, setLoading, setTerpene, allTerpenes])\n\n    const addToTerpProfile: MouseEventHandler = () => {\n        if (selectedTerpenes.length === 0) {\n            const index: number = allTerpenes.findIndex(x => x._id === terpene._id)\n            const tag: string = allTerpenes[index]._id.toString()\n            let l: any = []\n            l.push({[tag]: parseInt(concentration)})\n            setSelectedTerpenes([])\n            setTerpConc([])\n            setSelectedTerpenes([allTerpenes[index]])\n            setTerpConc([JSON.stringify(l[0])])\n            setConcentration(0)\n            return\n        }\n        if (selectedTerpenes.length > 0) {\n            const index: number = selectedTerpenes.findIndex(x => x._id === terpene._id)\n            if (index < 0) {\n                let l: any = []\n                const spliceIndex: number = allTerpenes.findIndex(x => x._id === terpene._id)\n                const newSelTerpArray: Terpene[] = [...selectedTerpenes, allTerpenes[spliceIndex]]\n                const tag: string = allTerpenes[spliceIndex]['_id']\n                l.push({[tag]: parseInt(concentration)})\n                const newTerpConcArray: JSON[] = [...terpConc, JSON.stringify(l[0])]\n                setSelectedTerpenes([])\n                setSelectedTerpenes(newSelTerpArray)\n                setTerpConc([])\n                setTerpConc(newTerpConcArray)\n                setConcentration(0)\n                return\n            }\n            return\n        }\n        return\n    } \n \n    return(\n        <div style={{maxWidth: '75%', margin: 'auto'}} >\n            <h3 style= {{textAlign: 'center'}} >New Product Profile Pages</h3>\n            <Form>\n                <FormGroup>\n                    <Label for='terpene'>Terpene</Label>\n                    <Input type='select' id='terpenes' onChange={handleChange}>\n                        {allTerpenes.length >= 0 && allTerpenes.map(terp => {\n                            return(\n                                <option key={terp._id}>{terp['terpene/name']}</option>\n                            )\n                        })}\n                    </Input>\n                </FormGroup>\n                <FormGroup>\n                    <Label for='concentration'>Concentration %</Label>\n                    <Input type='number' id='conc' value={concentration} onChange={handleChange} />\n                </FormGroup>\n                {concentration > 0 && <Button color='success' onClick={addToTerpProfile}>Add to Terpenes</Button>}\n            </Form>\n        </div>\n    )\n}\n\nexport default TerpeneForm","/home/aely/flureerecoil/src/Components/CannabinoidForm.tsx",["575"],"import { ChangeEventHandler, FunctionComponent, useEffect, useState, MouseEventHandler } from 'react'\nimport { useRecoilState, useRecoilValue } from 'recoil'\nimport { Button, Form, FormGroup, Label, Input } from 'reactstrap'\nimport { cannConcentrations, selectedCanns } from '../Recoil/productForm.tsx'\nimport { Cannabinoid, MySyntheticEvent } from '../types/types.ts'\nimport { getCannabinoids, handle as h } from 'src/Recoil/fluree.tsx'\n\nconst CannabinoidForm: FunctionComponent = (props:any) => {\n    const allCannabinoids: Cannabinoid[] = useRecoilValue(getCannabinoids)\n    const [concentration, setConcentration] = useState<number>()\n    const [cannabinoid, setCannabinoid] = useState<Cannabinoid>({})\n    const [cannConc, setCannConc] = useRecoilState<Array<number>>(cannConcentrations)\n    const [selectedCannabinoids, setSelectedCannabinoids] = useRecoilState<Array<Cannabinoid>>(selectedCanns)\n    const [loading, setLoading] = useState<boolean>(true)\n    \n    const handleChange: ChangeEventHandler = ({target: {id, value}}: MySyntheticEvent) => {\n        switch(id) {\n            case 'conc': {\n                setConcentration(value)\n                break;\n            }\n            case 'cann': {\n                let cbn: Cannabinoid = allCannabinoids.filter(prop => {\n                    return prop['cannabinoid/name'].includes(value)\n                })\n                setCannabinoid(cbn[0])\n                break;\n            }\n            default: break;\n        }\n    }\n\n    useEffect(() => {\n        if(loading) {\n            setCannabinoid(allCannabinoids[0])\n            setLoading(false)\n        }\n    }, [loading, setLoading, setCannabinoid, allCannabinoids])\n\n    const addToCannProfile: MouseEventHandler = () => {\n        if (selectedCannabinoids.length === 0) {\n            const index: number = allCannabinoids.findIndex(x => x._id === cannabinoid._id)\n            const tag: string = allCannabinoids[index]._id.toString()\n            let l: any = []\n            l.push({[tag]: parseInt(concentration)})\n            setSelectedCannabinoids([])\n            setCannConc([])\n            setSelectedCannabinoids([allCannabinoids[index]])\n            setCannConc([JSON.stringify(l[0])])\n            setConcentration(0)\n            return\n        }\n        if (selectedCannabinoids.length > 0) {\n            console.log(cannabinoid)\n            const index: number = selectedCannabinoids.findIndex(x => x._id === cannabinoid._id)\n            console.log(index)\n            if (index < 0) {\n                let l: any = []\n                const spliceIndex: number = allCannabinoids.findIndex(x => x._id === cannabinoid._id)\n                const newSelCannArray: Cannabinoid[] = [...selectedCannabinoids, allCannabinoids[spliceIndex]]\n                const tag: string = allCannabinoids[spliceIndex]['_id']\n                l.push({[tag]: parseInt(concentration)})\n                const newCannConcArray: number[] = [...cannConc, JSON.stringify(l[0])]\n                setSelectedCannabinoids([])\n                setSelectedCannabinoids(newSelCannArray)\n                setCannConc([])\n                setCannConc(newCannConcArray)\n                setConcentration(0)\n                return\n            }\n            return\n        }\n    }\n \n    return(\n        <div style={{maxWidth: '75%', margin: 'auto'}}>\n            <Form>\n                <FormGroup>\n                    <Label for='cannabinoid'>Cannabinoid</Label>\n                    <Input type='select' id='cann' onChange={handleChange} >\n                        {allCannabinoids.map(cann => {\n                            return(\n                                <option key={cann._id}>{cann['cannabinoid/name']}</option>\n                            )\n                        })}\n                    </Input>\n                </FormGroup>\n                <FormGroup>\n                    <Label for='cannConcentration'>Concentration %</Label>\n                    <Input type='number' id='conc' onChange={handleChange} />\n                </FormGroup>\n                {concentration > 0 && <Button color='success' onClick={addToCannProfile}>Add to Cannabinoids</Button>}\n            </Form>\n        </div>\n    )\n}\n\nexport default CannabinoidForm","/home/aely/flureerecoil/src/queries/addProduct.tsx",[],"/home/aely/flureerecoil/src/Components/Products.tsx",["576","577"],"import { account as a, getCannabinoids, getProducts, getCategories, getTerpenes, forceUpdate, filteredProducts as f } from '../Recoil'\nimport { ChangeEventHandler, useState, useEffect, useRef, RefObject } from 'react'\nimport { useRecoilValue, useSetRecoilState, useRecoilState } from 'recoil'\nimport { Product, Category, Terpene } from '../types'\nimport { fetchTerpeneProducts, fetchCannabinoidProducts } from '../queries'\nimport { Form, FormGroup, Label, Input, Button } from 'reactstrap';\nimport { MySyntheticEvent } from 'src/types/types';\nimport { send } from '../ws'\nimport RenderProducts from './RenderProducts.tsx'\n\ninterface PropTypes {\n    setCurrentView: Function,\n    setHandle: Function\n}\n  \nconst Products: Function = (props: PropTypes) => {\n\n    const account: string = useRecoilValue(a)\n    const update: Function = useSetRecoilState(forceUpdate)\n    const allProducts: Product[] = useRecoilValue(getProducts)\n    const allCategories: Category[] = useRecoilValue(getCategories)\n    const allTerpenes: Terpene[] = useRecoilValue(getTerpenes)\n    const allCannabinoids: Terpene[] = useRecoilValue(getCannabinoids)\n    const [search, setSearch] = useState<string>('')\n    const [catFilter, setCatFilter] = useState<string>('')\n    const [filteredProducts, setFilteredProducts] = useRecoilState<Array<Product>>(f)\n    const [loading, setLoading] = useState<boolean>(true)\n    const filterRef: RefObject<any> = useRef(null)\n\n    useEffect(() => {\n        if(loading) {\n            if(filteredProducts.length < 1 || filteredProducts.length === allProducts.length - 1) {\n                setFilteredProducts(allProducts)\n            }\n            setTimeout(() => {filterRef.current.focus()}, 300)\n            setLoading(false)\n        }\n        if(!loading && !filterRef.current.focus()){\n            filterRef.current.focus()\n        }\n    }, [loading, setLoading, setFilteredProducts, allProducts])\n\n    const handleChange: ChangeEventHandler = async ({target: {value, id}}: MySyntheticEvent) => {\n        switch(id) {\n            case 'search': {\n                setSearch(value)\n                send('filter.name', value, account)\n                break;\n            }\n            case 'category': {\n                setCatFilter(value)\n                if(value === 'All') {\n                    setFilteredProducts(allProducts)\n                    break;\n                }\n                send('filter.cat', value, account)\n                break;\n            }\n            case 'terpene': {\n                update(Math.random())\n                const queryHandle: string = await setFilter('terpeneFilter', value)\n                const id: string = await setFilter('terpeneId', value)\n                const filter: Product[] = await setFilter('terpene', queryHandle)\n                const data: any = { id: id.toString(), filter: filter}\n                send('filter.terpene', data, account)\n                break;\n            }\n            case 'cannabinoid': {\n                update(Math.random())\n                const queryHandle: string = await setFilter('cannabinoidFilter', value)\n                const id: string = await setFilter('cannabinoidId', value)\n                const filter: Product[] = await setFilter('cannabinoid', queryHandle)\n                const data: any = { id: id, filter: filter}\n                send('filter.cannabinoid', data, account)\n                break;\n            }\n            default: break;\n        }\n    }\n\n    const setFilter: Function = async (property: string, term: string) => {\n        switch(property) {\n            case 'terpeneFilter': {\n                const response = await allTerpenes.findIndex(x => x['terpene/name'] === term)\n                return allTerpenes[response]['terpene/handle']\n            }\n            case 'terpeneId': {\n                const response = await allTerpenes.findIndex(x => x['terpene/name'] === term)\n                return allTerpenes[response]['_id'].toString()\n            }\n            case 'terpene': {\n                const response: Product[] = await fetchTerpeneProducts(term)\n                return response[0]['terpene/products']\n            }\n            case 'cannabinoidFilter': {\n                const response = await allCannabinoids.findIndex(x => x['cannabinoid/name'] === term)\n                return allCannabinoids[response]['cannabinoid/handle']\n            }\n            case 'cannabinoid': {\n                const response: Product[] = await fetchCannabinoidProducts(term)\n                return response[0]['cannabinoid/products']\n            }\n            case 'cannabinoidId': {\n                const response = await allCannabinoids.findIndex(x => x['cannabinoid/name'] === term)\n                return allCannabinoids[response]['_id'].toString()\n            }\n            default: break;\n        }\n        \n    }\n\n    const categoryForm: Function = () => {\n        return(\n            <>\n                <Form>\n                    <FormGroup>\n                        <Label for='search'>Search for a Product by Category</Label>\n                        <Input type='select' id='category' onChange={handleChange}>\n                            <option>All</option>\n                            {allCategories.map(cat => {\n                                return <option key={cat['_id']}>{cat['category/name']}</option>\n                            })}\n                        </Input>\n                    </FormGroup>\n                </Form>\n            </>\n        )\n    }\n\n    const terpeneForm: Function = () => {\n        return(\n            <>\n                <Form>\n                    <FormGroup>\n                        <Label for='search'>Search for a Product by Terpene</Label>\n                        <Input type='select' id='terpene' onChange={handleChange}>\n                            {allTerpenes.map(terp => {\n                                return <option key={terp['_id']}>{terp['terpene/name']}</option>\n                            })}\n                        </Input>\n                    </FormGroup>\n                </Form>\n            </>\n        )\n    }\n\n    const cannabinoidForm: Function = () => {\n        return(\n            <>\n                <Form>\n                    <FormGroup>\n                        <Label for='search'>Search for a Product by Cannabinoid</Label>\n                        <Input type='select' id='cannabinoid' onChange={handleChange}>\n                            {allCannabinoids.map(cann => {\n                                return <option key={cann['_id']}>{cann['cannabinoid/name']}</option>\n                            })}\n                        </Input>\n                    </FormGroup>\n                </Form>\n            </>\n        )\n    }\n\n    const searchForm: Function = () => {\n        return(\n            <>\n                <Form style={{margin: '0 auto', maxWidth: '400px'}} >\n                    <FormGroup>\n                        <Label for='search'>Search for a Product by Name</Label>\n                        <Input type='text' id='search' value={search} innerRef={filterRef} onChange={handleChange} />\n                    </FormGroup>\n                </Form>\n            </>\n        )\n    }\n\n    const setView: Function = (view: string) => {\n        props.setCurrentView(view)\n    }\n\n    const renderProducts: Function = () => {\n        return(\n            <>\n                <RenderProducts\n                setCurrentView={setView}\n                products={filteredProducts}\n                />\n            </>\n        )\n    }\n\n    return(\n        <div style={{textAlign: 'center', margin: '0 auto'}} >\n            <br/>\n            <Button color='warning' onClick={() => setFilteredProducts(allProducts)}>Remove All Filters</Button>\n            <br />\n            {searchForm()}\n            <br/>\n            {categoryForm()}\n            <br/>\n            {terpeneForm()}\n            <br/>\n            {cannabinoidForm()}\n            <br/>\n            {filteredProducts !== undefined && filteredProducts.length > 0 && renderProducts()}\n        </div>\n    )\n\n}\n\nexport default Products","/home/aely/flureerecoil/src/Components/ProductDetails.tsx",[],"/home/aely/flureerecoil/src/utils/ipfs.js",[],"/home/aely/flureerecoil/src/Components/TerpeneDisplay.tsx",["578"],"import { useState } from 'react'\nimport { Terpene } from '../types/types.ts'\nimport { Button, Table } from 'reactstrap'\nimport { Editor } from 'react-draft-wysiwyg';\nimport { EditorState, ContentState } from 'draft-js';\nimport htmlToDraft from 'html-to-draftjs';\nimport { Accordion, AccordionBody, AccordionHeader, AccordionItem } from 'reactstrap';\n\ninterface PropTypes {\n    terpenes: Terpene[],\n    concentrations: JSON[]\n}\n\nconst TerpeneDisplay: Function = (props: PropTypes) => {\n    const [openId, setOpenId] = useState<undefined | number>();\n    const toggle = (id: number) => {\n        openId === id ? setOpenId(undefined) : setOpenId(id);\n    };\n\n    const renderTerpeneProfile: Function = () => {\n        return (\n            <>\n              <h3>Terpene Profile: </h3>\n              <Accordion openId={openId} toggle={toggle}>\n              {props.terpenes.map((terp: Terpene, index: number) => {\n                  return (\n                    <AccordionItem key={terp['_id']}>\n                    <AccordionHeader targetId={`${index}`}>\n                        {renderEntryHeader(terp, index)}\n                    </AccordionHeader>\n                    <AccordionBody accordionId={`${index}`}>\n                        {renderEntryBody(terp, index)}\n                    </AccordionBody>\n                    </AccordionItem>\n                  )\n              })}\n              </Accordion>\n            </>\n        )\n    }\n    \n    const renderEntryBody: Function = (terp: Terpene, idx: number) => {\n        return(\n            <Table striped responsive style ={{margin: 'auto', maxWidth: '80%'}} >\n                <tbody>\n                    <tr key={idx}>\n                        <td>\n                            {idx + 1}\n                        </td>\n                        <td>\n                            {terp['terpene/name']} \n                        </td>\n                        <td>\n                            <Editor \n                            editorState={EditorState.createWithContent(ContentState.createFromBlockArray(htmlToDraft(terp['terpene/effectDesc'].replace(/'''/g, '\"')).contentBlocks))}\n                            readOnly='true'\n                            toolbarHidden='true'\n                            />\n                        </td>\n                        <td>\n                            <Editor \n                            editorState={EditorState.createWithContent(ContentState.createFromBlockArray(htmlToDraft(terp['terpene/effectDesc'].replace(/'''/g, '\"')).contentBlocks))}\n                            readOnly='true'\n                            toolbarHidden='true'\n                            />\n                        </td>\n                        <td>\n                            {props.concentrations[idx][`${terp['_id']}`]}%\n                        </td>\n                    </tr>\n                </tbody>\n            </Table>\n        )\n    }\n\n    const renderEntryHeader: Function = (terp: Terpene, idx: number) => {\n        const con: JSON = JSON.parse(props.concentrations[idx])\n        return (\n            <>\n                <span>\n                    {terp['terpene/name']}{'\\u00A0'}\n                </span>\n                <span>\n                    {con[`${terp['_id']}`]}%\n                </span>\n            </>\n        )\n    }\n\n    const renderEmpty: Function = () => {\n        return <h5 style={{textAlign: 'center'}}>No Cannabinoids Selected</h5>\n    }\n    return(\n        <div style={{textAlign: 'center'}}>\n            {props.terpenes.length > 0 && renderTerpeneProfile()}\n            {props.terpenes.length === 0 &&  renderEmpty()}\n        </div>\n    )\n}\n\nexport default TerpeneDisplay","/home/aely/flureerecoil/src/Components/CannabinoidDisplay.tsx",["579"],"import { useState } from 'react'\nimport { Cannabinoid } from '../types'\nimport { Button, Table } from 'reactstrap'\nimport { Editor } from 'react-draft-wysiwyg';\nimport { EditorState, ContentState } from 'draft-js';\nimport htmlToDraft from 'html-to-draftjs';\nimport { Accordion, AccordionBody, AccordionHeader, AccordionItem } from 'reactstrap';\n\ninterface PropTypes {\n    cannabinoids: Cannabinoid[],\n    concentrations: JSON[]\n}\n\nconst CannabinoidDisplay: Function = (props: PropTypes) => {\n\n    const [openId, setOpenId] = useState<undefined | number>();\n    const toggle = (id: number) => {\n        openId === id ? setOpenId(undefined) : setOpenId(id);\n    };\n\n    const renderCannabinoidProfile: Function = () => {\n        return (\n            <>\n              <h3>Cannabinoid Profile:</h3>\n              <br/>\n              <Accordion openId={openId} toggle={toggle}>\n              {props.cannabinoids.map((cann: Cannabinoid, index: number) => {\n                  return (\n                    <AccordionItem key={cann['_id']} style={{margin: 'auto', display: 'block'}}>\n                    <AccordionHeader targetId={`${index}`}>\n                        {renderEntryHeader(cann, index)}\n                    </AccordionHeader>\n                    <AccordionBody accordionId={`${index}`}>\n                        {renderEntryBody(cann, index)}\n                    </AccordionBody>\n                    </AccordionItem>\n                  )\n              })}\n              </Accordion>\n            </>\n        )\n    }\n\n    const renderEntryHeader: Function = (cann: Cannabinoid, idx: number) => {\n        const con: JSON = JSON.parse(props.concentrations[idx])\n        return(\n            <>\n                <span>\n                    {cann['cannabinoid/name']}{'\\u00A0'}\n                </span>\n                <span>\n                    {con[`${cann['_id']}`]}%\n                </span>\n            </>\n        )\n    }\n\n    const renderEntryBody: Function = (cann: Cannabinoid, idx: number) => {\n        const con: JSON = JSON.parse(props.concentrations[idx])\n        return(\n            <Table striped responsive style ={{margin: 'auto', maxWidth: '80%'}} >\n                <tbody>\n                    <tr key={idx}>\n                        <td>\n                            {idx + 1}\n                        </td>\n                        <td>\n                            {cann['cannabinoid/name']} \n                        </td>\n                        <td>\n                            <Editor \n                            editorState={EditorState.createWithContent(ContentState.createFromBlockArray(htmlToDraft(cann['cannabinoid/effectDesc'].replace(/'''/g, '\"')).contentBlocks))}\n                            readOnly='true'\n                            toolbarHidden='true'\n                            />\n                        </td>\n                        <td>\n                            {con[`${cann['_id']}`]}%\n                        </td>\n                    </tr>\n                </tbody>\n            </Table>\n        )\n    }\n\n    const renderEmpty: Function = () => {\n        return <h5 style={{textAlign: 'center'}}>No Cannabinoids Selected</h5>\n    }\n\n    return(\n        <div style={{textAlign: 'center'}}>\n            {props.cannabinoids.length > 0 && renderCannabinoidProfile()}\n            {props.cannabinoids.length === 0 &&  renderEmpty()}\n        </div>\n    )\n}\n\nexport default CannabinoidDisplay","/home/aely/flureerecoil/src/Components/EditProduct.tsx",[],"/home/aely/flureerecoil/src/queries/updateProduct.tsx",[],"/home/aely/flureerecoil/src/Recoil/index.js",[],"/home/aely/flureerecoil/src/queries/index.js",[],"/home/aely/flureerecoil/src/queries/fetchCustomers.js",[],"/home/aely/flureerecoil/src/queries/fetchLocations.js",[],"/home/aely/flureerecoil/src/queries/getMyAlbums.js",[],"/home/aely/flureerecoil/src/queries/getMyTracks.js",[],"/home/aely/flureerecoil/src/queries/getTrackDetails.js",[],"/home/aely/flureerecoil/src/types/index.js",[],"/home/aely/flureerecoil/src/Components/Loaders/MyBarLoader.tsx",[],"/home/aely/flureerecoil/src/Recoil/windowEvents.tsx",["580","581","582"],"import { atom, atomFamily, selector, selectorFamily } from 'recoil'\n\nexport const toggled = atom<boolean>({\n    key: 'toggled',\n    default: true,\n    persistence_UNSTABLE: {\n        type: 'accessToken'\n    }\n})\n\nexport const image = atom<boolean>({\n    key: 'image',\n    default: false,\n    persistence_UNSTABLE: {\n        type: 'accessToken'\n    }\n})\n\nexport const collapsed = atom<boolean>({\n    key: 'collapsed',\n    default: false,\n    persistence_UNSTABLE: {\n        type: 'accessToken'\n    }\n})\n\nexport const rtl = atom<boolean>({\n    key: 'rtl',\n    default: false,\n    persistence_UNSTABLE: {\n        type: 'accessToken'\n    }\n})\n\nexport const sidebarWidth = atom<number>({\n    key: 'sidebarWidth',\n    default: 0,\n    persistence_UNSTABLE: {\n        type: 'sidebarWidth'\n    }\n})\n\nexport const width = atom<number>({\n    key: 'width',\n    default: 1200,\n    persistence_UNSTABLE: {\n        type: 'width'\n    }\n})\n\nexport const height = atom<number>({\n    key: 'height',\n    default: 800,\n    persistence_UNSTABLE: {\n        type: 'height'\n    }\n})","/home/aely/flureerecoil/src/Components/MySidebar.tsx",[],"/home/aely/flureerecoil/src/Components/RenderProducts.tsx",[],"/home/aely/flureerecoil/src/Components/RenderProduct.tsx",["583"],"import { Button, Card, Row, Col } from 'react-bootstrap'\nimport { resetCart, cart as items, updateTotalCost, account as a, handle as h } from '../Recoil'\nimport { useRecoilValue, useSetRecoilState } from 'recoil'\nimport '../App.css';\nimport { Item, Product } from '../types/types'\nimport { send } from '../ws'\nimport { useEffect, useState } from 'react';\n\ninterface PropTypes {\n    product: Product,\n    setCurrentView: Function\n}\n\nconst RenderProducts: Function = (props: PropTypes) => {\n\n    const updateCost: Function = useSetRecoilState(updateTotalCost)\n    const reset: Function = useSetRecoilState(resetCart)\n    const account: string = useRecoilValue(a)\n    const cart: Item[] = useRecoilValue(items)\n    const setHandle: Function = useSetRecoilState(h)\n    const [showMessage, setShowMessage] = useState<boolean>(false)\n    \n    const addToCart: Function = (data: Product, crt: Item[]) => {\n        const payload: any = { cart: crt, item: data }\n        setShowMessage(true)\n        //reset()\n        send('add.to.cart', payload, account)\n        setTimeout(() => {setShowMessage(false)}, 1000)\n    }\n\n    const viewProduct: Function = (view: string, hdl: string) => {\n        setHandle(hdl)\n        props.setCurrentView(view)\n    }\n\n    useEffect(() => {\n        updateCost(cart)\n    }, [updateCost, cart])\n\n    return(\n        <>\n            <Row style={{display: 'inline-block', maxWidth: '80%', margin: '5px', height: '500px'}} key={props.product['_id']}>\n                <Col md={50}>\n                    <Card style={{ width: '18rem' }}>\n                        <Card.Img variant=\"top\" src={`https://ipfs.io/ipfs/${props.product['product/imageHash']}`} style={{maxHeight: '300px'}} />\n                        <Card.Body>\n                            <Card.Title>{props.product['product/name']}</Card.Title>\n                            <Card.Text>\n                            ${props.product['product/cost']}\n                            </Card.Text>\n                            <Button style={{margin: '2px'}} variant='info' onClick={() => viewProduct('product', props.product['product/handle'])} >Details</Button>\n                            {!showMessage && <Button style={{margin: '2px'}} onClick={() => addToCart(props.product, cart)} variant=\"success\">Add to Cart</Button>}\n                            {showMessage && <Button style={{margin: '2px'}} variant=\"secondary\">Added to Cart</Button>}\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n        </>\n    )\n}\n\nexport default RenderProducts","/home/aely/flureerecoil/src/utils/useNetworkMonitor.tsx",["584","585"],"/home/aely/flureerecoil/src/Components/MySidebarHeader.tsx",[],"/home/aely/flureerecoil/src/Components/MySidebarContent.tsx",["586"],"import { Menu, MenuItem, SubMenu } from 'react-pro-sidebar'\nimport { useEffect } from 'react'\nimport { FaTelegram, FaGem, FaHeart, FaEthereum } from 'react-icons/fa'\nimport { tstbalance, getDSPTST, getSymbol, account as a, balance, etherBalance, cart as items, totalCost, resetCart, updateTotalCost } from '../Recoil'\nimport { useRecoilValue, useSetRecoilState } from 'recoil'\nimport { BsGearFill } from 'react-icons/bs'\nimport { Item } from '../types'\nimport { Badge, Button, Row } from 'react-bootstrap'\nimport { GiHemp, GiMusicSpell, GiShoppingCart } from 'react-icons/gi'\nimport { Link } from 'react-router-dom'\nimport CartSubMenuItem from './CartSubMenuItem.tsx'\nimport SpotifySubMenu from './SpotifySubMenu.tsx'\nimport useExpTimer from '../utils/useExpTimer.tsx'\nimport 'react-pro-sidebar/dist/css/styles.css';\n\ninterface PropTypes {\n    changeHandler: Function\n}\n\nconst MySidebarContent: Function = (props: PropTypes) => {\n    useExpTimer()\n\n    const account: string = useRecoilValue(a)\n    const cart = useRecoilValue<Array<Item>>(items)\n    const total: number = useRecoilValue(totalCost)\n    const reset: Function = useSetRecoilState(resetCart)\n    const updateCost: Function = useSetRecoilState(updateTotalCost)\n    const eth: number = useRecoilValue(etherBalance(account))\n    const getBalance: number = useRecoilValue(balance(account))\n    const symbol: string = useRecoilValue(getSymbol)\n    const tbalance: number = useRecoilValue(tstbalance(account))\n    const tsymbol: string = useRecoilValue(getDSPTST)\n\n    useEffect(() => {\n        updateCost(cart)\n    }, [cart, updateCost])\n\n    /*const sendEth: Function = () => {\n        await window.web3.eth.sendTransaction({from: account, to: , value: amount})\n    }*/\n\n    const cartSuffix: Function = () => {\n        return(\n            <>\n                {cart.length > 0 && <Badge variant='warning'>{cart.length}</Badge>}\n                {cart.length === 0 && <Badge variant='danger'>EMPTY</Badge>}\n            </>\n        )\n    }\n\n    const cartPrefix: Function = () => {\n        return(\n            <>\n                {total > 0 && <Badge variant='success'>${total}</Badge>}\n            </>\n        )\n    }\n\n    const cartIcon: Function = () => {\n        return(\n            <div>\n                <Link to='#/nothing'><GiShoppingCart /><sup>{cartSuffix()}</sup></Link>\n            </div>\n        )\n    }\n\n    const sendIcon: Function = () => {\n        return(\n            <div>\n                <Badge variant='success'><FaTelegram /></Badge>\n            </div>\n        )\n    }\n\n    return(\n        <>\n            <Menu iconShape=\"square\">\n                <MenuItem icon={<FaGem />}><Link to='/'>Dashboard</Link></MenuItem>\n                <MenuItem icon={<GiHemp />}>\n                    <Link to='/editProduct'>Dispensary</Link>\n                </MenuItem>\n                <SubMenu title=\"Links\" icon={<FaHeart />}>\n                    <MenuItem><Link to='/spotify'>Spotify</Link></MenuItem>\n                    <MenuItem><Link to='/editTerpene'>Manage Terpenes</Link></MenuItem>\n                    <MenuItem><Link to='/editCannabinoid'></Link>Manage Cannabinoids</MenuItem>\n                    <MenuItem><Link to='/editProduct'></Link>Manage Products</MenuItem>\n                </SubMenu>\n                <SubMenu title=\"Settings\" icon={<BsGearFill />} >\n                    <MenuItem><div onClick={() => props.changeHandler('collapsed')} color='secondary'>Collapsed</div></MenuItem>\n                    <MenuItem><div onClick={() => props.changeHandler('rtl')} color='secondary'>R-t-L</div></MenuItem>\n                    <MenuItem><div onClick={() => props.changeHandler('image')} color='secondary'>Use Background Image</div></MenuItem>\n                    <MenuItem><div onClick={() => props.changeHandler('toggled')} color='secondary'>Toggle</div></MenuItem>\n                </SubMenu>\n                <MenuItem icon={<GiMusicSpell />}>\n                    <Link to='/spotify'>Spotify</Link>\n                </MenuItem>\n                <SubMenu icon={cartIcon()} suffix={cartSuffix()} prefix={cartPrefix()}>\n                    {cart.length > 0 && cart.map((item: Item) => {\n                        return(\n                            <>\n                                <CartSubMenuItem\n                                cartItem={item}\n                                />\n                            </>\n                        )\n                    })}\n                    {cart.length > 0 && <MenuItem><Button variant='danger' onClick={() => reset()}>Empty Cart</Button></MenuItem>}\n                    <MenuItem>Total: ${total}</MenuItem>\n                    {cart.length > 0 && <MenuItem><Link to='/checkout'>Checkout</Link></MenuItem>}\n                </SubMenu>\n                <SubMenu icon={<FaEthereum />} title='Crypto Wallet'>\n                    <SubMenu title={`ETH: ${window.web3.utils.fromWei(eth, 'Ether')}`}>\n                        <Row>\n                            <MenuItem><Button variant='success'><FaTelegram /></Button></MenuItem>\n                        </Row>\n                    </SubMenu>\n                    <SubMenu title={`${symbol}: ${window.web3.utils.fromWei(getBalance, 'Ether')}`}>\n                        <Row>\n                            <MenuItem><Badge variant='success'><FaTelegram /></Badge></MenuItem>\n                        </Row>\n                    </SubMenu>\n                    <SubMenu title={`${tsymbol}: ${window.web3.utils.fromWei(tbalance, 'Ether')}`}>\n                        <Row>\n                            <MenuItem><Badge variant='success'><FaTelegram /></Badge></MenuItem>\n                        </Row>    \n                    </SubMenu>                    \n                </SubMenu>\n                <SpotifySubMenu />\n            </Menu>\n        </>\n    )\n}\n\nexport default MySidebarContent","/home/aely/flureerecoil/src/utils/loadAccountBalance.js",[],"/home/aely/flureerecoil/src/Components/SpotifySubMenu.tsx",[],"/home/aely/flureerecoil/src/Components/MySidebarFooter.tsx",[],"/home/aely/flureerecoil/src/utils/useExpTimer.tsx",[],"/home/aely/flureerecoil/src/Components/CartSubMenuItem.tsx",["587","588"],"import { Item } from '../types'\nimport { send } from '../ws'\nimport { BsPlusCircleFill, BsFillDashCircleFill, BsFillTrashFill } from 'react-icons/bs'\nimport { SubMenu, MenuItem } from 'react-pro-sidebar'\nimport { Link } from 'react-router-dom'\nimport { Badge, Row } from 'react-bootstrap'\nimport { useRecoilValue, useSetRecoilState } from 'recoil'\nimport { cart as items, resetCart, account as a } from '../Recoil'\nimport 'react-pro-sidebar/dist/css/styles.css';\n\n\ninterface PropTypes {\n    cartItem: Item\n}\n\nconst CartSubMenu: Function = (props: PropTypes) => {\n\n    const cart: Item[] = useRecoilValue(items)\n    const account: string = useRecoilValue(a)\n\n    const incQty: Function = (crt: Item[], item: Item[]) => {\n        const payload: any = { cart: crt, item: item }\n        send('increaseQuantity', payload, account)\n    }\n\n    const decQty: Function = (crt: Item[], item: Item[]) => {\n        const payload: any = { cart: crt, item: item }\n        send('decreaseQuantity', payload, account)\n    }\n\n    const delItem: Function = (crt: Item[], item: Item[]) => {\n        const payload: any = { cart: crt, item: item }\n        send('deleteItem', payload, account)\n    }\n\n    return(\n            <SubMenu key={props.cartItem.id} title={props.cartItem.name} suffix={props.cartItem.quantity}>\n                <Row>\n                    <MenuItem><Badge variant='success'><Link onClick={() => incQty(cart, props.cartItem)}><BsPlusCircleFill /></Link></Badge></MenuItem>\n                    <MenuItem><Badge variant='danger'><Link onClick={() => decQty(cart, props.cartItem)}><BsFillDashCircleFill /></Link></Badge></MenuItem>\n                    <MenuItem><Badge variant='danger'><Link onClick={() => delItem(cart, props.cartItem)}><BsFillTrashFill /></Link></Badge></MenuItem>\n                </Row>\n            </SubMenu>\n    )\n}\n\nexport default CartSubMenu","/home/aely/flureerecoil/src/Recoil/dspTST.tsx",["589"],"import { atom, atomFamily, selector, selectorFamily } from 'recoil'\nimport loadDSPTST from '../utils/loadDSPTST'\nimport loadWeb3 from '../utils/loadWeb3'\nimport { forceUpdate } from '../Recoil'\n\nexport const tstbalance = atomFamily({\n    key: 'tstbalance',\n    default: selectorFamily({\n        key: 'tstbalance',\n        get: (param) => async ({get}) => {\n            get(forceUpdate)\n            const methods = get(initializeDSPTST)\n            console.log(methods)\n            const response = await methods.balanceOf(param).call()\n            console.log(response)\n            return response\n        }\n    }),\n    dangerouslyAllowMutability: true,\n})\n\nexport const getDSPTST = selector({\n    key: 'getDSPTST',\n    get: async ({get}) => {\n        try {\n            const methods = get(initializeDSPTST);\n            const response = await methods.symbol().call()\n            return response\n        } catch (error) {\n            console.log(error)\n        }\n      }\n})\n\nexport const initializeDSPTST = selector({\n    key: 'initializeDSPTST',\n    get: async () => {\n        try {\n            await loadWeb3()\n            const response = await loadDSPTST();\n            return response.methods\n        } catch (error) {\n            console.log(error)\n        }\n      }\n})","/home/aely/flureerecoil/src/utils/loadDSPTST.js",[],"/home/aely/flureerecoil/src/utils/useTransListener.tsx",["590"],"import { useEffect } from 'react'\nimport Web3 from 'web3'\n\nconst newSocket = new WebSocket('ws://localhost:3334/')\n\nnewSocket.onopen = () => {\n    console.log('hello', newSocket)\n}\n\nconst useTransListener: Function = () => {\n    \n    useEffect(() => {\n        \n        newSocket.onmessage = ({ data }: any) => {\n            const message: JSON = JSON.parse(data)\n            console.log(message)\n        }\n\n        /*window.web3.currentProvider.connection.onMessage = ({ data }: any) => {\n            const message: JSON = JSON.parse(data)\n            console.log(message)\n        }*/\n\n        /*window.web3.eth.subscribe('logs', {\n            address: '0xBcA3320e93C54513A467Bb517dC25f9Eba15e779'\n        }, function(error: any, result: any){\n            if (!error) {\n                console.log(result)\n            } else {\n                console.log(error)\n            }\n        })\n        .on(\"data\", function(log: any){\n            console.log(log);\n        })\n        .on(\"changed\", function(log: any){\n            console.log(log)\n        });*/\n\n    }, [])\n\n    return null\n}\n\nexport default useTransListener","/home/aely/flureerecoil/src/utils/useViewport.tsx",["591"],"import { useEffect } from 'react'\nimport { useSetRecoilState } from 'recoil'\nimport { width as w, height as h } from '../Recoil'\n\nconst useViewport = () => {\n\n        const setWidth: Function = useSetRecoilState(w);\n        // Add a second state variable \"height\" and default it to the current window height\n        const setHeight: Function = useSetRecoilState(h);\n      \n        useEffect(() => {\n          const handleWindowResize = () => {\n            setWidth(window.innerWidth);\n            // Set the height in state as well as the width\n            setHeight(window.innerHeight);\n          }\n      \n          window.addEventListener(\"resize\", handleWindowResize);\n          return () => window.removeEventListener(\"resize\", handleWindowResize);\n        }, []);\n      \n  }\n\n  export default useViewport","/home/aely/flureerecoil/src/utils/useSidebarWidth.tsx",["592"],"import { useEffect } from 'react'\nimport { useSetRecoilState, useRecoilValue } from 'recoil'\nimport { sidebarWidth as sw, collapsed as c, toggled as t } from '../Recoil'\n\nconst useSidebarWidth: Function = () => {\n\n    const setSidebarWidth: Function = useSetRecoilState(sw);\n    const collapsed: boolean = useRecoilValue(c);\n    const toggled: boolean = useRecoilValue(t);\n      \n    useEffect(() => {\n        if(toggled && collapsed) {\n            setSidebarWidth(80)\n        }\n        if(toggled && !collapsed) {\n            setSidebarWidth(270)\n        }\n        if(!toggled) {\n            setSidebarWidth(0)\n        }\n\n    }, [collapsed, toggled])\n\n    return null\n      \n  }\n\n  export default useSidebarWidth","/home/aely/flureerecoil/src/Components/NewSidebarBgImage.tsx",[],"/home/aely/flureerecoil/src/queries/addSidebarImage.js",[],"/home/aely/flureerecoil/src/queries/getBgImages.js",[],"/home/aely/flureerecoil/src/Components/RenderShows.tsx",[],"/home/aely/flureerecoil/src/Components/RenderEpisodes.tsx",[],"/home/aely/flureerecoil/src/queries/getShowEpisodes.js",[],{"ruleId":"593","replacedBy":"594"},{"ruleId":"595","replacedBy":"596"},{"ruleId":"597","severity":1,"message":"598","line":1,"column":16,"nodeType":"599","messageId":"600","endLine":1,"endColumn":26},{"ruleId":"593","replacedBy":"601"},{"ruleId":"595","replacedBy":"602"},{"ruleId":"597","severity":1,"message":"603","line":1,"column":10,"nodeType":"599","messageId":"600","endLine":1,"endColumn":14},{"ruleId":"593","replacedBy":"604"},{"ruleId":"595","replacedBy":"605"},{"ruleId":"593","replacedBy":"594"},{"ruleId":"595","replacedBy":"596"},{"ruleId":"606","severity":1,"message":"607","line":2,"column":18,"nodeType":"599","messageId":"600","endLine":2,"endColumn":23},{"ruleId":"606","severity":1,"message":"608","line":20,"column":21,"nodeType":"599","messageId":"600","endLine":20,"endColumn":31},{"ruleId":"606","severity":1,"message":"609","line":5,"column":10,"nodeType":"599","messageId":"600","endLine":5,"endColumn":17},{"ruleId":"606","severity":1,"message":"610","line":31,"column":10,"nodeType":"599","messageId":"600","endLine":31,"endColumn":19},{"ruleId":"593","replacedBy":"611"},{"ruleId":"595","replacedBy":"612"},{"ruleId":"613","severity":1,"message":"614","line":41,"column":6,"nodeType":"615","endLine":41,"endColumn":8,"suggestions":"616"},{"ruleId":"606","severity":1,"message":"617","line":5,"column":10,"nodeType":"599","messageId":"600","endLine":5,"endColumn":14},{"ruleId":"606","severity":1,"message":"618","line":2,"column":10,"nodeType":"599","messageId":"600","endLine":2,"endColumn":21},{"ruleId":"606","severity":1,"message":"619","line":5,"column":10,"nodeType":"599","messageId":"600","endLine":5,"endColumn":28},{"ruleId":"620","severity":1,"message":"621","line":155,"column":17,"nodeType":"622","messageId":"623","endLine":155,"endColumn":19},{"ruleId":"606","severity":1,"message":"624","line":2,"column":10,"nodeType":"599","messageId":"600","endLine":2,"endColumn":19},{"ruleId":"606","severity":1,"message":"625","line":2,"column":36,"nodeType":"599","messageId":"600","endLine":2,"endColumn":51},{"ruleId":"606","severity":1,"message":"626","line":3,"column":26,"nodeType":"599","messageId":"600","endLine":3,"endColumn":43},{"ruleId":"606","severity":1,"message":"627","line":7,"column":10,"nodeType":"599","messageId":"600","endLine":7,"endColumn":19},{"ruleId":"606","severity":1,"message":"598","line":2,"column":16,"nodeType":"599","messageId":"600","endLine":2,"endColumn":26},{"ruleId":"606","severity":1,"message":"628","line":2,"column":38,"nodeType":"599","messageId":"600","endLine":2,"endColumn":52},{"ruleId":"606","severity":1,"message":"629","line":2,"column":54,"nodeType":"599","messageId":"600","endLine":2,"endColumn":71},{"ruleId":"620","severity":1,"message":"621","line":55,"column":17,"nodeType":"622","messageId":"623","endLine":55,"endColumn":19},{"ruleId":"620","severity":1,"message":"621","line":63,"column":17,"nodeType":"622","messageId":"623","endLine":63,"endColumn":19},{"ruleId":"620","severity":1,"message":"621","line":72,"column":17,"nodeType":"622","messageId":"623","endLine":72,"endColumn":19},{"ruleId":"620","severity":1,"message":"621","line":80,"column":17,"nodeType":"622","messageId":"623","endLine":80,"endColumn":19},{"ruleId":"613","severity":1,"message":"614","line":108,"column":8,"nodeType":"615","endLine":108,"endColumn":10,"suggestions":"630"},{"ruleId":"606","severity":1,"message":"627","line":1,"column":10,"nodeType":"599","messageId":"600","endLine":1,"endColumn":19},{"ruleId":"631","severity":1,"message":"632","line":4,"column":19,"nodeType":"633","messageId":"634","endLine":4,"endColumn":20,"suggestions":"635"},{"ruleId":"606","severity":1,"message":"636","line":3,"column":8,"nodeType":"599","messageId":"600","endLine":3,"endColumn":14},{"ruleId":"606","severity":1,"message":"637","line":1,"column":30,"nodeType":"599","messageId":"600","endLine":1,"endColumn":47},{"ruleId":"613","severity":1,"message":"638","line":44,"column":8,"nodeType":"615","endLine":44,"endColumn":29,"suggestions":"639"},{"ruleId":"613","severity":1,"message":"640","line":35,"column":8,"nodeType":"615","endLine":35,"endColumn":29,"suggestions":"641"},{"ruleId":"606","severity":1,"message":"642","line":1,"column":29,"nodeType":"599","messageId":"600","endLine":1,"endColumn":37},{"ruleId":"606","severity":1,"message":"643","line":31,"column":12,"nodeType":"599","messageId":"600","endLine":31,"endColumn":17},{"ruleId":"613","severity":1,"message":"644","line":59,"column":8,"nodeType":"615","endLine":59,"endColumn":29,"suggestions":"645"},{"ruleId":"606","severity":1,"message":"646","line":33,"column":12,"nodeType":"599","messageId":"600","endLine":33,"endColumn":18},{"ruleId":"606","severity":1,"message":"647","line":11,"column":25,"nodeType":"599","messageId":"600","endLine":11,"endColumn":38},{"ruleId":"606","severity":1,"message":"648","line":11,"column":40,"nodeType":"599","messageId":"600","endLine":11,"endColumn":57},{"ruleId":"613","severity":1,"message":"649","line":20,"column":8,"nodeType":"615","endLine":20,"endColumn":23,"suggestions":"650"},{"ruleId":"613","severity":1,"message":"651","line":19,"column":8,"nodeType":"615","endLine":19,"endColumn":23,"suggestions":"652"},{"ruleId":"606","severity":1,"message":"653","line":1,"column":16,"nodeType":"599","messageId":"600","endLine":1,"endColumn":24},{"ruleId":"606","severity":1,"message":"654","line":3,"column":10,"nodeType":"599","messageId":"600","endLine":3,"endColumn":23},{"ruleId":"606","severity":1,"message":"655","line":5,"column":37,"nodeType":"599","messageId":"600","endLine":5,"endColumn":44},{"ruleId":"606","severity":1,"message":"656","line":6,"column":37,"nodeType":"599","messageId":"600","endLine":6,"endColumn":38},{"ruleId":"606","severity":1,"message":"657","line":25,"column":12,"nodeType":"599","messageId":"600","endLine":25,"endColumn":21},{"ruleId":"613","severity":1,"message":"658","line":41,"column":8,"nodeType":"615","endLine":41,"endColumn":63,"suggestions":"659"},{"ruleId":"606","severity":1,"message":"660","line":3,"column":10,"nodeType":"599","messageId":"600","endLine":3,"endColumn":16},{"ruleId":"606","severity":1,"message":"660","line":3,"column":10,"nodeType":"599","messageId":"600","endLine":3,"endColumn":16},{"ruleId":"606","severity":1,"message":"598","line":1,"column":16,"nodeType":"599","messageId":"600","endLine":1,"endColumn":26},{"ruleId":"606","severity":1,"message":"653","line":1,"column":28,"nodeType":"599","messageId":"600","endLine":1,"endColumn":36},{"ruleId":"606","severity":1,"message":"628","line":1,"column":38,"nodeType":"599","messageId":"600","endLine":1,"endColumn":52},{"ruleId":"606","severity":1,"message":"661","line":17,"column":11,"nodeType":"599","messageId":"600","endLine":17,"endColumn":26},{"ruleId":"606","severity":1,"message":"662","line":12,"column":11,"nodeType":"599","messageId":"600","endLine":12,"endColumn":23},{"ruleId":"606","severity":1,"message":"663","line":14,"column":11,"nodeType":"599","messageId":"600","endLine":14,"endColumn":31},{"ruleId":"606","severity":1,"message":"664","line":67,"column":11,"nodeType":"599","messageId":"600","endLine":67,"endColumn":29},{"ruleId":"606","severity":1,"message":"626","line":7,"column":26,"nodeType":"599","messageId":"600","endLine":7,"endColumn":43},{"ruleId":"606","severity":1,"message":"624","line":8,"column":25,"nodeType":"599","messageId":"600","endLine":8,"endColumn":34},{"ruleId":"606","severity":1,"message":"603","line":1,"column":10,"nodeType":"599","messageId":"600","endLine":1,"endColumn":14},{"ruleId":"606","severity":1,"message":"665","line":2,"column":8,"nodeType":"599","messageId":"600","endLine":2,"endColumn":12},{"ruleId":"613","severity":1,"message":"666","line":20,"column":12,"nodeType":"615","endLine":20,"endColumn":14,"suggestions":"667"},{"ruleId":"613","severity":1,"message":"668","line":22,"column":8,"nodeType":"615","endLine":22,"endColumn":28,"suggestions":"669"},"no-native-reassign",["670"],"no-negated-in-lhs",["671"],"no-unused-vars","'atomFamily' is defined but never used.","Identifier","unusedVar",["670"],["671"],"'atom' is defined but never used.",["670"],["671"],"@typescript-eslint/no-unused-vars","'Badge' is defined but never used.","'setBalance' is assigned a value but never used.","'bgImage' is defined but never used.","'networkId' is assigned a value but never used.",["670"],["671"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loading'. Either include it or remove the dependency array.","ArrayExpression",["672"],"'Link' is defined but never used.","'initProduct' is defined but never used.","'localStorageEffect' is defined but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","'resetCart' is defined but never used.","'updateTotalCost' is defined but never used.","'useSetRecoilState' is defined but never used.","'useEffect' is defined but never used.","'selectorFamily' is defined but never used.","'useRecoilCallback' is defined but never used.",["673"],"no-useless-escape","Unnecessary escape character: \\ .","Literal","unnecessaryEscape",["674","675"],"'Player' is defined but never used.","'MouseEventHandler' is defined but never used.","React Hook useEffect has missing dependencies: 'effectDesc', 'name', 'props.terpene', and 'scentDesc'. Either include them or remove the dependency array. If 'setName' needs the current value of 'props.terpene', you can also switch to useReducer instead of useState and read 'props.terpene' in the reducer.",["676"],"React Hook useEffect has missing dependencies: 'effectDesc', 'name', and 'props.cannabinoid'. Either include them or remove the dependency array. If 'setName' needs the current value of 'props.cannabinoid', you can also switch to useReducer instead of useState and read 'props.cannabinoid' in the reducer.",["677"],"'useState' is defined but never used.","'tabId' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'clearProductInfo', 'clearProfile', and 'setHandle'. Either include them or remove the dependency array.",["678"],"'buffer' is assigned a value but never used.","'updateTerpene' is defined but never used.","'updateCannabinoid' is defined but never used.","React Hook useEffect has missing dependencies: 'deriveTerps' and 'selectedTerpenes.length'. Either include them or remove the dependency array.",["679"],"React Hook useEffect has missing dependencies: 'deriveCanns' and 'selectedCannabinoids.length'. Either include them or remove the dependency array.",["680"],"'selector' is defined but never used.","'getCategories' is defined but never used.","'Product' is defined but never used.","'h' is defined but never used.","'catFilter' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'filteredProducts.length'. Either include it or remove the dependency array.",["681"],"'Button' is defined but never used.","'reset' is assigned a value but never used.","'acct' is assigned a value but never used.","'setAccount' is assigned a value but never used.","'sendIcon' is assigned a value but never used.","'Web3' is defined but never used.","React Hook useEffect has missing dependencies: 'setHeight' and 'setWidth'. Either include them or remove the dependency array.",["682"],"React Hook useEffect has a missing dependency: 'setSidebarWidth'. Either include it or remove the dependency array.",["683"],"no-global-assign","no-unsafe-negation",{"desc":"684","fix":"685"},{"desc":"684","fix":"686"},{"messageId":"687","fix":"688","desc":"689"},{"messageId":"690","fix":"691","desc":"692"},{"desc":"693","fix":"694"},{"desc":"695","fix":"696"},{"desc":"697","fix":"698"},{"desc":"699","fix":"700"},{"desc":"701","fix":"702"},{"desc":"703","fix":"704"},{"desc":"705","fix":"706"},{"desc":"707","fix":"708"},"Update the dependencies array to be: [loading]",{"range":"709","text":"710"},{"range":"711","text":"710"},"removeEscape",{"range":"712","text":"713"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"714","text":"715"},"Replace the `\\` with `\\\\` to include the actual backslash character.","Update the dependencies array to be: [effectDesc, loading, name, props.terpene, scentDesc, setLoading]",{"range":"716","text":"717"},"Update the dependencies array to be: [effectDesc, loading, name, props.cannabinoid, setLoading]",{"range":"718","text":"719"},"Update the dependencies array to be: [clearProductInfo, clearProfile, loading, setHandle, setLoading]",{"range":"720","text":"721"},"Update the dependencies array to be: [activeProduct, deriveTerps, selectedTerpenes.length]",{"range":"722","text":"723"},"Update the dependencies array to be: [activeProduct, deriveCanns, selectedCannabinoids.length]",{"range":"724","text":"725"},"Update the dependencies array to be: [loading, setLoading, setFilteredProducts, allProducts, filteredProducts.length]",{"range":"726","text":"727"},"Update the dependencies array to be: [setHeight, setWidth]",{"range":"728","text":"729"},"Update the dependencies array to be: [collapsed, setSidebarWidth, toggled]",{"range":"730","text":"731"},[1166,1168],"[loading]",[3545,3547],[105,106],"",[105,105],"\\",[2102,2123],"[effectDesc, loading, name, props.terpene, scentDesc, setLoading]",[1527,1548],"[effectDesc, loading, name, props.cannabinoid, setLoading]",[2256,2277],"[clearProductInfo, clearProfile, loading, setHandle, setLoading]",[859,874],"[activeProduct, deriveTerps, selectedTerpenes.length]",[880,895],"[activeProduct, deriveCanns, selectedCannabinoids.length]",[1852,1907],"[loading, setLoading, setFilteredProducts, allProducts, filteredProducts.length]",[764,766],"[setHeight, setWidth]",[630,650],"[collapsed, setSidebarWidth, toggled]"]